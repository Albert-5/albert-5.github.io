<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Albert</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://albert-5.cn/"/>
  <updated>2019-10-30T14:04:36.796Z</updated>
  <id>https://albert-5.cn/</id>
  
  <author>
    <name>albert</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML后期</title>
    <link href="https://albert-5.cn/2019/10/30/html%E5%90%8E%E6%9C%9F/"/>
    <id>https://albert-5.cn/2019/10/30/html后期/</id>
    <published>2019-10-30T13:59:07.000Z</published>
    <updated>2019-10-30T14:04:36.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>分为<code>有序列表ol、无序列表ul以及自定义列表dl</code></p><p><strong>有序列表ol</strong></p><blockquote><p>有序列表是一列项目，列表项目使用数字进行标记。有序列表始于==<ol>==标签，每个列表项始于==<li>==</li></ol></p></blockquote><ul><li><p>有序列表有==type==和==start==</p></li><li><p>语法格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">value1</span> <span class="attr">start</span>=<span class="string">value2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：value1表示有序列表项目符号的类型，value2表示项目开始的数值，其中type属性如下：</code></p><p>| type类型 |                      描述                       |<br>| :——: | :———————————————: |<br>|  type=1  |      表示列表项目用数字表示（1,2,3……）      |<br>|  type=a  |    表示列表项目用小写字母表示（a,b,c……）    |<br>|  type=A  |    表示列表项目用大写字母表示（A,B,C……）    |<br>|  type=i  |  表示列表项目用小写字母表示（i,ii,iii……）   |<br>|  type=I  | 表示列表项目用大写罗马数字表示（I,II,III…..） |</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">DOCTYPE</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">      数字列表：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>小写字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">'a'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>大写字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">'A'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>大写罗马字母列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">'I'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>小写罗马字母：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">'i'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：type默认为数字列表，即不给type设置属性值时显示的为数字列表</code></p><p><strong>无序列表ul</strong></p><blockquote><p>无序列表是一个项目的列表，此列项目使用粗体圆点进行标记，无序列表始于==<ul>==标签，每个列表项始于==<li>==。无序列表的各个列表项之间没有顺序级别之分，是并列的。</li></ul></p></blockquote><ul><li>==ul==的==type==属性：默认值：==disc==，方块：==square==，空心圆：==circle==</li><li>语法格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：&lt;ul&gt;&lt;/ul&gt;标记用于定义无序列表，&lt;li&gt;&lt;/li&gt;标记嵌套在&lt;ul&gt;&lt;/ul&gt;标记中，用于描述具体的列表项，每对&lt;ul&gt;&lt;/ul&gt;中至少赢你包含一对&lt;li&gt;&lt;/li&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>学习ing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Disc 项目符号列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Circle 项目符号列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Square 项目符号列表：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"square"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义列表dl</strong></p><blockquote><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合，自定义列表以==<dl>==标签开始。每个自定义列表项以==<dt>==开始，每个自定义列表项的定义以==<dd>==开始，自定义列表的列表项前没有任何项目符合。</dd></dt></dl></p></blockquote><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>一个自定义列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>春天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>万物复苏<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>百花争艳<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>适合学习<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>夏天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>夏日绵绵<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>烈日炎炎<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>适合学习<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>秋天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>秋高气爽<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>天高地阔<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>适合学习<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML元数据"><a href="#HTML元数据" class="headerlink" title="HTML元数据"></a>HTML元数据</h2><blockquote><p>元数据就是用来描述数据的数据。HTML中也有很多元数据，==<meta>==标签提供关于HTML文档的元数据：描述（description）、关键词（keywords）、文档的作者（author）等其他元数据。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'author'</span> <span class="attr">content</span>=<span class="string">'https://albert-5.cn'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'description'</span> <span class="attr">content</span>=<span class="string">'A Simple Example'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://albert-5.cn'</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML块"><a href="#HTML块" class="headerlink" title="HTML块"></a>HTML块</h2><p><strong>大多数HTML元素被定义为块级元素或者内联元素</strong></p><p><strong>块级元素</strong></p><ul><li>独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示。宽度（<code>width</code>）、高度（<code>height</code>）、内边距（<code>padding</code>）和外边距（<code>margin</code>）都可控制</li><li>常见宽级元素：<code>&lt;h1&gt;,&lt;p&gt;,&lt;ul&gt;,&lt;table&gt;</code></li></ul><p><strong>内联元素</strong></p><ul><li>内联元素在显示时通常不会以新行开始，宽度<code>width</code>、高度<code>height</code>、内边距的<code>top/bottom(padding-top/padding-bottom)</code>和外边距的<code>top/bottom(margin-top/margin-bottom)</code>都不可改变</li><li>常见内联元素：<code>&lt;b&gt;,&lt;td&gt;,&lt;a&gt;,&lt;img&gt;</code></li></ul><h2 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h2><p><strong>HTML布局主要有两种：使用<code>div</code>元素的布局和使用<code>table</code>元素的布局</strong></p><p><strong>使用<code>div</code>元素布局</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'header'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：上述是div部分</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #header&#123;</span></span><br><span class="line"><span class="undefined">    background-color:black;</span></span><br><span class="line"><span class="undefined">    color:red;</span></span><br><span class="line"><span class="undefined">    text-align:center;</span></span><br><span class="line"><span class="undefined">    padding:25px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：以上是css部分</code></p><p><strong>使用<code>table</code>元素布局</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">'syl'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">td</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：以上是HTML部分</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  table.syl&#123;</span></span><br><span class="line"><span class="undefined">    width:100%;</span></span><br><span class="line"><span class="undefined">    border:1px solid #d4d4d4;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  table.syl td&#123;</span></span><br><span class="line"><span class="undefined">    padding:10px;</span></span><br><span class="line"><span class="undefined">    width:20px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：以上是css部分</code></p><p><strong><code>table</code>元素布局</strong></p><ul><li>优点<ul><li>理解比较简单</li><li>不同的浏览器看到的效果一般相同</li></ul></li><li>缺点<ul><li>显示样式和数据绑定在一起</li><li>布局的时候灵活度不高</li><li>一个页面可能会有大量的table元素，代码冗余度高</li><li>增加带宽</li><li>搜索引擎不喜欢这样的布局</li></ul></li></ul><p><code>div</code>元素布局</p><ul><li>优点<ul><li>符合W3C标准</li><li>搜索引擎更加友好</li><li>样式的调整更加方便，内容和样式分离，使页面和样式的调整变得更加方便</li><li>节省带宽，代码冗余度低</li><li>表现和结构分离，在团队开发中更容易分工合作而减少相互关联性</li></ul></li></ul><p><code>注：DIV+CSS并不是要我们抛弃table,因为table在显示数据时更加方便</code></p><h2 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h2><blockquote><p>文本格式其实就是文本的样式，比如文章的换行、加粗、斜体等类似的都是文本那个是，都是通过文本格式标签实现的。</p></blockquote><p><strong>常见的文本格式化标签：</strong></p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><b></b></td><td style="text-align:center">定义粗体文本</td></tr><tr><td style="text-align:center"><big></big></td><td style="text-align:center">定义大号字体</td></tr><tr><td style="text-align:center"><em></em></td><td style="text-align:center">定义着重文字</td></tr><tr><td style="text-align:center"><i></i></td><td style="text-align:center">定义斜体字</td></tr><tr><td style="text-align:center"><small></small></td><td style="text-align:center">定义小号字体</td></tr><tr><td style="text-align:center"><strong></strong></td><td style="text-align:center">定义加重语气</td></tr><tr><td style="text-align:center"><sub></sub></td><td style="text-align:center">定义下标字</td></tr><tr><td style="text-align:center"><sup></sup></td><td style="text-align:center">定义上标字</td></tr><tr><td style="text-align:center"><ins></ins></td><td style="text-align:center">定义插入字</td></tr><tr><td style="text-align:center"><del></del></td><td style="text-align:center">定义删除字</td></tr></tbody></table><h2 id="文档和网站架构"><a href="#文档和网站架构" class="headerlink" title="文档和网站架构"></a>文档和网站架构</h2><p><strong>标题</strong></p><p>通常在顶部有一个大标题或者图标，通常存在于每一个网页</p><p><strong>导航</strong></p><p>提供跳转到网站不同内容的链接；通常由菜单按钮、链接或者选项卡表示</p><p><strong>主要内容</strong></p><p>中心的一个大区域，包含给定网页的大部分独特内容</p><p><strong>侧栏</strong></p><p>一些次要信息、链接、引言和广告等</p><p><strong>页脚</strong></p><p>横跨页面底部的条纹，通常包含精美的打印、版权通知或者联系信息</p><p>为了实现这样的语义标记，HTML提供了可以用来表示这些部分的专用标签</p><ul><li>标题： <code>&lt;header&gt;</code></li><li>导航栏：<code>&lt;nav&gt;</code></li><li>主要内容：<code>&lt;main&gt;</code>具有代表性的内容段落主题可以使用<code>&lt;article&gt;,&lt;section&gt;,&lt;div&gt;元素</code></li><li>侧栏：<code>&lt;aside&gt;</code>经常包含在<code>&lt;mian&gt;</code>中</li><li>页脚：<code>&lt;footer&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">DOCTYPE</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阿尔伯特<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">       This is header!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>TEAM<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Article heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>好好学习天天向上<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>subsection<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气不错，学个习吧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Another subsection<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我爱学习，学习使我快乐！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Related<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>春天<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>夏天<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>秋天<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>冬天<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>©Copyright 2018 by albert.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="html" scheme="https://albert-5.cn/categories/html/"/>
    
    
      <category term="前端" scheme="https://albert-5.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://albert-5.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html前期</title>
    <link href="https://albert-5.cn/2019/10/30/html%E5%89%8D%E6%9C%9F/"/>
    <id>https://albert-5.cn/2019/10/30/html前期/</id>
    <published>2019-10-29T23:30:56.000Z</published>
    <updated>2019-10-29T23:32:27.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><p><strong>双标签</strong></p><p>双标签也称为体标记，是指有开始和结束两个标记符组成的标记</p><p><code>&lt;标记名&gt; &lt;/标记名&gt;</code></p><p>常见的双标签有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://albert-5.cn'</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>单标签（单标记）</strong></p><p>单标记也称为空标记，是指用一个标记即可完成地描述某个功能的标记，基本语法格式为：</p><p><code>&lt;标记名/&gt;</code></p><p>常见的标签有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span> <span class="comment">&lt;!--水平分割线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签的关系</strong></p><ul><li><p>嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>HTML的固有结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页名称<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h2><p>==通过style属性更改HTML的样式==</p><p><strong>样式–背景颜色</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">'background-color:red'</span>&gt;</span>albert<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：background-color</code>属性值的设置来给背景设置颜色的</p><p><strong>样式–字体、颜色和尺寸</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-family:arial;color:green;font-size:50ox;"</span>&gt;</span>albert<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：通过对style属性值的设置来设置字体，通过对color属性值的设置来设置颜色，通过对font-size属性值的设置来设置字体大小</code></p><p><strong>样式–文本对齐</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">'text-align:center'</span>&gt;</span>albert<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：标题 albert 相对于页面居中对齐</code></p><h2 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h2><p>链接可以是一个字、一个词、或者一组词，也可以是一幅图像，可以点击内容来跳转到新的文档或者当前文档中的某个部分。鼠标指针移动到网页中的某个链接时，箭头会变成一只小手。</p><p>==通过使用<a>标签在HTML中创建链接==</a></p><ul><li>通过使用<code>href</code>属性创建指向另一个文档的链接</li><li>通过使用<code>name</code>属性创建文档内的书签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://albert-5.cn'</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：点击上方的 我的博客 这个链接就会跳转到我的博客首页。暂时没有确定链接目标时，通常将标签内的href属性值设定为&quot;#&quot;,即表示为一个空链接</code></p><p>通过<code>name</code>属性创建锚点链接，可以定位到目标内容（比如页面的某个小节）。创建锚点分为两步：</p><ul><li>使用<code>&lt;a href=&#39;#id名&#39;&gt;链接文本&lt;/a&gt;</code>创建链接文本</li><li>使用相应的<code>id</code>名标注跳转目标的位置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">‘#winter</span>&gt;</span>查看冬天<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>春<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>万物复苏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>夏日绵绵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>秋高气爽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">'winter'</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>白雪皑皑<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>target属性:</code>用于指定链接页面的打开方式，其取值有==<em>self</em>==和==<em>blank</em>==两种，其中==_self==是默认值，==_blank==为在新窗口中打开方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'https://albert-5.cn'</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>albert<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：target默认属性值为：_self,使得目标文档载入并显示在相同的框架或者窗口中作为源文档</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="html" scheme="https://albert-5.cn/categories/html/"/>
    
    
      <category term="前端" scheme="https://albert-5.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="https://albert-5.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>快捷键</title>
    <link href="https://albert-5.cn/2019/10/01/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://albert-5.cn/2019/10/01/快捷键/</id>
    <published>2019-10-01T14:34:01.000Z</published>
    <updated>2019-10-01T14:38:27.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center> Photoshop常用快捷键收</center><p><strong>工具快捷键</strong></p><table><thead><tr><th>动作</th><th>Mac</th><th>windows</th></tr></thead><tbody><tr><td>选择工具</td><td>V</td><td>V</td></tr><tr><td>矩形/椭圆工具</td><td>M</td><td>M</td></tr><tr><td>套索工具</td><td>W</td><td>W</td></tr><tr><td>剪裁/切片工具</td><td>C</td><td>C</td></tr><tr><td>滴管/取色/标尺/注释/计数工具</td><td>I</td><td>I</td></tr><tr><td>修复画笔/修补/红眼工具</td><td>J</td><td>J</td></tr><tr><td>画笔/铅笔/颜色替换工具</td><td>B</td><td>B</td></tr><tr><td>图章工具</td><td>S</td><td>S</td></tr><tr><td>历史记录画笔工具</td><td>Y</td><td>Y</td></tr><tr><td>橡皮擦工具</td><td>E</td><td>E</td></tr><tr><td>渐变/油漆桶工具</td><td>G</td><td>G</td></tr><tr><td>减淡/加深/海绵工具</td><td>O</td><td>O</td></tr><tr><td>钢笔工具</td><td>P</td><td>P</td></tr><tr><td>文字工具</td><td>T</td><td>T</td></tr><tr><td>选择工具</td><td>A</td><td>A</td></tr><tr><td>矩形/椭圆/多边形/直线/自定义形状工具</td><td>U</td><td>U</td></tr><tr><td>3D对象工具</td><td>K</td><td>K</td></tr><tr><td>3D相机工具</td><td>N</td><td>N</td></tr><tr><td>抓手工具</td><td>H</td><td>H</td></tr><tr><td>旋转视图工具</td><td>R</td><td>R</td></tr><tr><td>缩放工具</td><td>Z</td></tr></tbody></table><p><strong>图像菜单</strong></p><table><thead><tr><th>动作</th><th>Mac</th><th>Windows</th></tr></thead><tbody><tr><td>调整-色阶</td><td>Cmd+L</td><td>Ctrl+L</td></tr><tr><td>调整-曲线</td><td>Cmd+M</td><td>Ctrl+M</td></tr><tr><td>调整-色相、饱和度</td><td>Cmd+U</td><td>Ctrl+U</td></tr><tr><td>调整-色彩平衡</td><td>Cmd+B</td><td>Ctrl+B</td></tr><tr><td>调整-黑白</td><td>Opt+Shift+Cmd+B</td><td>Alt+Shift+Ctrl+B</td></tr><tr><td>调整-反相</td><td>Cmd+I</td><td>Ctrl+I</td></tr><tr><td>去色</td><td>Shift+Cmd+U</td><td>Shift+Ctrl+U</td></tr><tr><td>自动色调</td><td>Shift+Cmd+L</td><td>Shift+Ctrl+L</td></tr><tr><td>自动对比度</td><td>Opt+Shift+Cmd+L</td><td>Alt+Shift+Ctrl+L</td></tr><tr><td>自动颜色</td><td>Shift+Cmd+B</td><td>Shift+Ctrl+B</td></tr><tr><td>图像大小</td><td>Opt+Cmd+I</td><td>Alt+Ctrl+I</td></tr><tr><td>画布大小</td><td>Opt+Cmd+C</td><td>Alt+Ctrl+C</td></tr><tr><td>记录测量</td><td>Shift+Cmd+M</td><td>Shift+Ctrl+M</td></tr><tr><td>新建-图层</td><td>Shift+Cmd+N</td><td>Shift+Ctrl+N</td></tr><tr><td>新建-通过拷贝的图层</td><td>Cmd+J</td><td>Ctrl+J</td></tr><tr><td>新建-通过剪切的图层</td><td>Shift+Cmd+J</td><td>Shift+Ctrl+J</td></tr><tr><td>创建剪贴蒙板</td><td>Opt+Cmd+G</td><td>Alt+Ctrl+G</td></tr><tr><td>图层编组</td><td>Cmd+G</td><td>Ctrl+G</td></tr><tr><td>取消图层编组</td><td>Shift+Cmd+G</td><td>Shift+Ctrl+G</td></tr><tr><td>排列-置为顶层</td><td>Shift+Cmd+]</td><td>Shift+Ctrl+]</td></tr><tr><td>排列-前移一层</td><td>Cmd+]</td><td>Ctrl+]</td></tr><tr><td>排列-后移一层</td><td>Cmd+[</td><td>Ctrl+[</td></tr><tr><td>排列-置为底层</td><td>Shift+Cmd+[</td><td>Shift+Ctrl+[</td></tr><tr><td>向下合并</td><td>Cmd+E</td><td>Ctrl+E</td></tr><tr><td>合并可见图层</td><td>Shift+Cmd+E</td><td>Shift+Ctrl+E</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="工具" scheme="https://albert-5.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Photoshop" scheme="https://albert-5.cn/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>国内访学与发展规划</title>
    <link href="https://albert-5.cn/2019/09/05/%E5%9B%BD%E5%86%85%E8%AE%BF%E5%AD%A6%E4%B8%8E%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/"/>
    <id>https://albert-5.cn/2019/09/05/国内访学与发展规划/</id>
    <published>2019-09-05T15:43:40.000Z</published>
    <updated>2019-09-08T07:14:45.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于国内访学的思考以及个人发展规划"><a href="#关于国内访学的思考以及个人发展规划" class="headerlink" title="关于国内访学的思考以及个人发展规划"></a>关于国内访学的思考以及个人发展规划</h2><h3 id="国内访学"><a href="#国内访学" class="headerlink" title="国内访学"></a>国内访学</h3><p>因为幸运我有机会去了别人家的大学，国内一所985、211以及双一流院校。大二参加了国内的访学项目并在此期间到合作学校进行为期一年的学习，这就意味着，我将离开刚刚熟悉的大学新校园，转而到另一所新大学去学习，一切都需要重新适应和改变，而且将会认识更多的同学，同时还将意味着我能够接受到更多优质的学习资源、遇到更多优秀的同学，努力提升自己成为一个优秀的人。</p><p>去年今日，我正在新的校园里畅游、徘徊，因为我想好好看看她（渴望而不可及的大学）到底是什么样子，和我的这个学校有什么不同吗？到底是什么魔力吸引着无数高考生的目光，使其奋进全力去考？而我到底值不值在这花费一年的时间来在此学习？</p><p>校园里，有行驶着的来往汽车，有独自一人背着双肩包听着音乐的过路人，也有人成群结队嘻闹的同学，也有着滑着滑板穿梭在人群中的人······那是青春活力的展现，国家未来的希望；教室里，有人敲到着手机，探索着虚拟空间的奥秘，有人专注的翻阅着自己的课本，畅游在高数大物的海洋里，也有人在朗朗地背书，求知求实。这些看起来和我们学校确实没有什么不同，但是上过课之后就会有更多的感受，老师上课时对问题的仔细讲解，老师对学生的那种要求：大一就开始论文写作锻炼，大一就开始参加各种各样的比赛，导师的指导和教诲恐怕让人受益匪浅，或许一两年之后学生出来发表的都是science一星二星文章，而我们还不知发表论文这回事，这也说明人家的起点高，所要到达的高度也是我们所望尘莫及的，更有甚者，他们有的课程都是论文写作培训、比赛训练之类的，无不让人羡慕；另外，他们有更广的眼界，有着更多的机会去接触所谓的大V，科技讲座、人工智能峰会（论坛）······</p><p><font color="indigo" size="4">但是</font>，反过来想，这是我自己的问题，必须由我来解决！</p><p>国内的访学项目真的是拓宽了我的视野，不仅仅体验了那种浓浓的学习氛围、享受到了一些优质资源、认识了一堆学霸朋友，更多的是自身能力与那些“学霸”们之间的差距和不足的认识。一年下来，虽在自己的学校是所谓的“好学生”，其实到头来你啥也不是，唯有自己努力提升各项能力才有机会与此较横！</p><h3 id="发展规划"><a href="#发展规划" class="headerlink" title="发展规划"></a>发展规划</h3><p>回想在交换的一年时光，GPA属实高不就，甚至感觉有点浪费这个交换名额，各科成绩都没有在本校的高，比赛也没有参加几个，得到的一些奖都无法走上台面，在本校的实验室任务项目也都没能参加，自学的机器学习相关知识也很难掌握，需要时间去理解和实践。过去的也就只能过去了，如今的我大学生涯已经过半，若不继续努力恐怕前程会有点上头。这一年的时间，我想弥补前些时间的过错和不足：</p><p>编程方向仍以python为主，C语言为辅，主要工作是python数学科学和算法，进阶是机器学习和自然语言处理；</p><p>专业课程学习还是需要下一定功夫，预习复习、上课笔记</p><p>娱乐兴趣就是摄影、摄像以及后期，用影像去记录生活</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="college" scheme="https://albert-5.cn/categories/college/"/>
    
    
      <category term="思考反思" scheme="https://albert-5.cn/tags/%E6%80%9D%E8%80%83%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>网络技术笔记</title>
    <link href="https://albert-5.cn/2019/08/01/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>https://albert-5.cn/2019/08/01/网络技术笔记/</id>
    <published>2019-08-01T09:34:41.000Z</published>
    <updated>2019-10-20T12:12:46.627Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网络技术"><a href="#网络技术" class="headerlink" title="网络技术"></a>网络技术</h1><center>Chapter 1</center><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-计算机网络的分类"><a href="#1-计算机网络的分类" class="headerlink" title="1. 计算机网络的分类"></a>1. 计算机网络的分类</h3><h4 id="1-1-局域网-Local-Area-Network-LAN"><a href="#1-1-局域网-Local-Area-Network-LAN" class="headerlink" title="1.1. 局域网(Local Area Network  LAN)"></a>1.1. 局域网(Local Area Network  LAN)</h4><p>特点：</p><ul><li>局域网覆盖<code>有限的地理范围</code>，使用于机关、学校、有限范围的计算机、终端与各类信息处理设备联网的需求</li><li>提供<code>传输效率</code>(10Mbps~10Gbps),支持高码率、高质量传输环境</li><li>一般属于一个单位所有，易建立、维护和扩展</li></ul><p>另一角度：</p><p>从<code>介质访问方法</code>的角度看，局域网可以分为共享介质式局域网与交换式局域网；从使用的<code>传输介质类型</code>的角度，又可以分为有限介质的有限局域网和无线局域网。</p><p>技术发展的三个方向：</p><ul><li>提高以太网的数据传输速率</li><li>将一个大型局域网划分成多个用网桥或者路由器互联的网络</li><li>将共享介质方式改为交换方式(在交换式局域网的基础上，出现了<code>虚拟局域网</code>VLAN)</li></ul><h4 id="1-2-城域网-Metropolitan-Area-Network-MAN"><a href="#1-2-城域网-Metropolitan-Area-Network-MAN" class="headerlink" title="1.2. 城域网(Metropolitan Area Network  MAN)"></a>1.2. 城域网(Metropolitan Area Network  MAN)</h4><p>概念：城市区域网络简称城域网，介于广域网和局域网之间的一种高速网络。目的是为了满足<code>几十公里范围</code>内的大量企业、机关、公司的多个局域网的互联要求，实现大量用户之间的数据、语音、图形的传输</p><h4 id="1-3-广域网"><a href="#1-3-广域网" class="headerlink" title="1.3. 广域网"></a>1.3. 广域网</h4><p>又叫远程网，覆盖范围从<code>几十公里到几千公里</code>。可以覆盖几个国家或地区，甚至横跨几个洲，从而形成国际性的远程计算机网络(分组交换网、卫星通讯网和无线分组网实现)</p><h3 id="计算机网络结构"><a href="#计算机网络结构" class="headerlink" title="计算机网络结构"></a>计算机网络结构</h3><h4 id="2-1-早期的广域网"><a href="#2-1-早期的广域网" class="headerlink" title="2.1. 早期的广域网"></a>2.1. 早期的广域网</h4><p><code>结构</code>上分成两部分：负责数据处理的计算机终端；负责数据通信的通信控制处理设备与通信线路</p><p><code>逻辑功能</code>上分成两部分：资源子网和通信子网</p><p>资源子网由计算机系统、终端、终端控制器、连接外部设备、各类软件资源与信息资源组成；资源子网负责全网的数据处理业务，负责向网络用户体统各类网络资源和网络服务。</p><h4 id="2-2-用户计算机接入"><a href="#2-2-用户计算机接入" class="headerlink" title="2.2. 用户计算机接入"></a>2.2. 用户计算机接入</h4><p>用户计算机可以通过局域网方式接入，也可以选择<code>电话交换网(PSTN)</code>、<code>有线电视网（CATV）</code>、<code>无线城域网（WMAN）</code>或<code>无线局域网（WLAN）</code>方式接入到作为地区级主干网的城域网。城域网又通过路由器与光纤接入到作为国家级或区域级主干网的广域网。多个广域网互联形成覆盖全世界的Internet系统</p><h3 id="实训任务"><a href="#实训任务" class="headerlink" title="实训任务"></a>实训任务</h3><h4 id="1-任务一：宽带城域网的结构"><a href="#1-任务一：宽带城域网的结构" class="headerlink" title="1. 任务一：宽带城域网的结构"></a>1. 任务一：宽带城域网的结构</h4><ul><li><p>宽带城域网的逻辑结构</p><p>设计一个宽带城域网将涉及<code>三个平台和一个出口</code>，即<code>网络平台、业务平台、管理平台和城市宽带出口</code></p><p><img src="https://i.loli.net/2019/08/01/5d42a0918e65876869.jpg" alt="宽带城域网的总体结构.jpg"></p></li><li><p>网络平台的层次结构</p><p>网络平台的层次结构又可以分为：<code>核心层、汇聚层、接入层</code></p><p>核心层主要承担高速数据的交换的功能，汇聚层主要承担路由和流量汇聚的功能，接入层主要承担用户接入和本地流量控制的功能。</p><ul><li><p>核心交换层的功能</p><ul><li>核心交换层将多个汇聚层连接在起来，为汇聚层的网络提供高速分组转发，为整个城市提供一个高速、安全与<code>具有QoS保障能力</code>的数据传输环境</li><li>核心交换层实现与主干网络的互联，提供城市的<code>宽带IP出口</code></li><li>核心交换层提供宽带城域网的用户<code>访问internet所需要的路由访问</code></li></ul></li><li><p>汇聚层的基本功能</p><ul><li><code>汇聚层的用户流量</code>进行数据分组传输的汇聚、转发和交换</li><li>根据接入层的用户流量进行<code>本地</code>路由、过滤、流量均衡、QoS优先级管理以及安全控制、IP地址转换、流量整形等处理</li><li>根据处理结果把<code>用户流量转发到核心层</code>或<code></code>本地进行路由处理`</li></ul></li><li><p>接入层的基本功能</p><ul><li><p>接入层的<code>最后一公里</code>问题，通过各种接入技术，连接最终用户，为它所覆盖范围内的永辉提供访问Internet以及其他信息服务</p></li><li><p><strong>三层结构</strong>的基本思想是<code>上层负责下层的数据汇聚</code>、<code>核心提供出口与QoS、汇聚本地路由、接入服务用户</code></p></li></ul></li></ul></li></ul><h4 id="2-实训任务二：管理和运营宽带城域网的关键技术"><a href="#2-实训任务二：管理和运营宽带城域网的关键技术" class="headerlink" title="2. 实训任务二：管理和运营宽带城域网的关键技术"></a>2. 实训任务二：管理和运营宽带城域网的关键技术</h4><p>管理和运营宽带城域网的关键技术主要是：带宽管理、服务质量QoS、网络管理、用户管理、多业务接入、统计与计费、IP地址的分配和地址转换、网络安全</p><ul><li>目前宽带城域网保证服务质量QoS要求的关键技术主要有<code>资源预留(RSVP)</code>、<code>区分服务(DiffeServ)与多协议标记交换MPLS</code></li><li>宽带城域网<code>带内网络管理是指利用数据通信网(DCN)</code>、<code>公共交换电话网(PSTN)</code>、对网络设备进行数据配置。<code>带宽网络管理是指利用网络协议(SNMP)建立网络管理系统</code></li></ul><h4 id="3-实训任务三：基于10GE的城域网方案"><a href="#3-实训任务三：基于10GE的城域网方案" class="headerlink" title="3. 实训任务三：基于10GE的城域网方案"></a>3. 实训任务三：基于10GE的城域网方案</h4><p>用于宽带城域网的光以太网有多种实现形式，其中最为重要的有两种：<code>基于10GE的技术</code>和<code>弹性分组环</code>技术。</p><p>10Gbps光以太网的技术优势主要表现在一下几个方面：</p><ul><li><p>以太网与DMDW技术都十分成熟，并且已经广泛使用，组建相同规模的宽带城域网，光以太网额造价是SONET的1/5，是ATM的1/10</p></li><li><p>光以太网的特征</p><ul><li>能够根据<code>终端用户的实际应用需求分配带宽</code>，保证带宽资源充分合理的应用</li><li><code>具有认证和授权功能</code>，用户访问网络资源必须经过认证和授权，确保用户和网络资源的合法性</li><li><code>提供计费功能</code>，能及时获得用户的上网时间记录和流量记录，支持按上网时间、用户流量或者包月计费方式、支持实时计费等</li><li>支持<code>VPN和防火墙</code>，有效保证网络安全</li><li>支持<code>MPLS</code>，具有一定的服务质量保证，提供分等级的QoS网络服务</li></ul></li><li><p>弹性分组环RPR技术的城域网</p><p><strong>一种直接的<code>高效传输IP分组</code>的传输技术，基础是Cisco公司提出的<code>动态分组技术(DPT)技术</code></strong></p></li></ul><p>RPR将沿<code>顺时针传输光纤</code>叫做外环，将沿<code>逆时针传输的光纤</code>叫做内环。弹性分组环RPR的内环和外环都可以同统计复用的方法传输IP分组，同时可以实现“自愈环”的功能。RPR的<strong>内环和外环都可以传输数据分组与控制分组</strong>。每一个节点都可以使用两个方向的光纤与近邻节点通信。这样做的目的除了高效地利用光纤带宽之外，还有一个目的是加速控制分组传输，提高环的可靠性，实现“环自愈”功能，保证城域网的系统可靠性与服务质量。</p><ul><li><p>RPR技术主要特点</p><ul><li><p>带宽的占用率高</p><p>传统额FDDI环网中，当源结点向目的结点成功地发送一个数据帧之后这个数据帧要由<strong>源结点</strong>中从环收回；而RPR环限制数据帧只在源节点与目的节点之间的光纤段上传输，当源结点成功地发送一个数据帧之后，这个数据帧要由目<strong>的结点</strong>从环中收回，这样就提高了环带宽的利用率；</p></li><li><p>公平性好</p><p>RPR环中每个结点都执行SRP公平算法，使得结点之间能够获得平等的带宽，防止个别结点因流量大而造成环拥堵。</p></li><li><p>快速保护和恢复能力强</p><p>RPR采用自愈环的设计思想，<code>能够在50ms的时间内</code>，隔离出现故障的节点和光纤段，提供SDH级快速保护和恢复，同时不需要像SDH那样必须有专用的带宽；</p></li><li><p>保证服务质量QoS</p></li></ul></li><li><p><strong>四网融合</strong></p></li></ul><p>计算机网络、电信通信网、电视通信网以及物联网</p><h4 id="4-实训任务四：宽带接入技术的基本类型"><a href="#4-实训任务四：宽带接入技术的基本类型" class="headerlink" title="4. 实训任务四：宽带接入技术的基本类型"></a>4. 实训任务四：宽带接入技术的基本类型</h4><p>接入技术可以分为有线接入和无线接入两种；从实现技术的角度，目前宽带接入技术主要有以下几种：<code>数字用户线xDSL、光纤同轴电缆混合网HFC技术、光纤接入技术、无线接入技术与局域网接入技术</code>。其中无线接入又可以分为无线局域网接入、无线城域网接入与无线Ad hoc接入。</p><ul><li><p>数字用户线xDSLjishu </p><p>数字用户环路，数字用户线是从用户到本地电话交换中心的一对铜双绞线，本子电话交换中心又叫做中心局；xDSL技术按上行(用户到交换局)和下行(交换局到用户)的速率是否相同分为速率<code>对称性</code>和速率<code>非对称性</code>两种</p><ul><li>非对称数字用户线(ADSL Asymmetric Digital Subscriber Line)</li><li>高比特率数字用户线(HDSL)</li><li>速率自适应数字用户线(RADSL)</li><li>甚高比特率数字用户线(VDSL)</li></ul></li><li><p>ADSL(非对称数字用户线)主要特点</p><ul><li>在现有电话铜双绞线上，以重叠不干扰传统模拟电话业务，即普通电话业务POTS的方式，提供高速数字业务。ADSL允许用户保留他们已经申请的模拟电话业务，可以支持用户在电话铜双绞线上的新型宽带业务。</li><li>用户不需要专门为获得ADSL服务而重新铺设电缆</li><li>提供额非对称宽带特性，上行速率在<code>64 kbps~640 kbps,下行速率在500 kbps~7 Mbps</code>。用户可以根据需要选择上行和下行速率。</li></ul></li><li><p>宽带无线接入技术</p><ul><li><p>无线接入技术主要有：<code>802.11标准的无线局域网(WLAN)接入</code>、<code>802.16标准的无线城域网(WMAN)接入</code>、<code>Ad hoc</code>接入技术，在无线宽带接入网的结构中，<code>远距离</code>采用802.16标准的WiMAX技术，可以在50km范围内提供70Mbps的传输速率；</p><ul><li><p>802.16标准与无线城域网WMAN</p><p>IEEE802.16标准体系的主要目标是制定工作在<code>2~66MHz</code>频率段的无线接入系统的物理层与介质访问控制MAC子层规范；在802.16标准增加了两个物理层标准的16d与16e，16d主要针对固定的无线网络部署，16e主要针对火车、汽车等移动物体的无线通信标准问题</p></li><li><p>802.11标准与无线局域网WLAN</p><p>定义了使用<code>红外、调频扩频与直接序列扩频技术</code>，传输速率为1Mbps或者2Mbps的无线局域网标准；11b定义了使用直接序列扩频技术，速率在1、2、5.5\11Mbps;11a将传输速率提高到54Mbps</p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://albert-5.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机三级" scheme="https://albert-5.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BA%A7/"/>
    
      <category term="网络技术" scheme="https://albert-5.cn/tags/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣电影top250</title>
    <link href="https://albert-5.cn/2019/08/01/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250/"/>
    <id>https://albert-5.cn/2019/08/01/豆瓣电影top250/</id>
    <published>2019-08-01T09:32:58.000Z</published>
    <updated>2019-08-01T09:34:11.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="豆瓣电影Top-250"><a href="#豆瓣电影Top-250" class="headerlink" title="豆瓣电影Top 250"></a>豆瓣电影Top 250</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="使用的模块"><a href="#使用的模块" class="headerlink" title="使用的模块"></a>使用的模块</h3><p><strong>chardet模块—判断编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pip install chardet</span><br></pre></td></tr></table></figure><p>使用上述命令安装模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果你的python没有安装chardet模块，你需要首先安装一下chardet判断编码的模块哦</span></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment">#先获取网页内容</span></span><br><span class="line">data = urllib.urlopen(<span class="string">'http://www.pythontab.com'</span>).read()</span><br><span class="line"><span class="comment">#用chardet进行内容分析</span></span><br><span class="line">chardit = chardet.detect(data)</span><br><span class="line">  </span><br><span class="line">data1 = urllib.urlopen(<span class="string">'http://www.baidu.com'</span>).read()</span><br><span class="line">  </span><br><span class="line">chardit1 = chardet.detect(data1)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> chardit[<span class="string">'encoding'</span>] <span class="comment"># pythontab</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> chardit1[<span class="string">'encoding'</span>] <span class="comment"># baidu</span></span><br></pre></td></tr></table></figure><p><strong>BeautifulSoup库</strong></p><p>安装<code>bs4</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>代码使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>find_all()方法返回文档中符合条件的所有tags，尽管有时候我们只想得到一个结果。比如文章中只有一个<body>标签，那么使用find_all()方法来查找<body>标签不太合适了使用find_all()方法设置limit=1参数不如直接使用find()方法</body><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"log":false,"model":{"position":"left","width":150,"height":300,"jsonPath":"/live2dw/assets/assets/shizuku.model.json"},"mobile":{"show":false}});</script></body></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; soup.find_all(<span class="string">'title'</span>, limit=<span class="number">1</span>)</span><br><span class="line">&gt; <span class="comment"># [&lt;title&gt;The Story&lt;/title&gt;]</span></span><br><span class="line">&gt; soup.find(<span class="string">'title'</span>)</span><br><span class="line">&gt; <span class="comment"># [&lt;title&gt;The Story&lt;/title&gt;]</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>唯一的区别是find_all()方法返回的结果是只包含一个元素的列表，而find()方法直接返回结果；find_all()方法没有找到指定元素时返回空列表，而find()方法找不到目标时返回None</strong></p></blockquote><p><strong>拓展</strong></p><p><code>关于find_all()和find()方法的介绍</code></p><p><code>find()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(name, attrs, recursive, text, **wargs)　　　　# recursive 递归的，循环的</span><br></pre></td></tr></table></figure><p>这些参数相当于过滤器一样可以进行筛选处理。不同的参数过滤可以应用到以下情况：</p><ul><li>查找标签，基于name参数</li><li>查找文本，基于text参数</li><li>基于正则表达式的查找</li><li>查找标签的属性，基于attrs参数</li><li>基于函数的查找</li></ul><p>通过标签查找：</p><p>可以传递任何标签的名字来查找到它第一次出现的地方。找到后，find函数返回一个BeautifulSoup的标签对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ecologicalpyramid.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> ecological_pyramid:</span><br><span class="line">　　soup = BeautifulSoup(ecological_pyramid, <span class="string">'html'</span>)</span><br><span class="line">producer_entries = soup.find(<span class="string">'ul'</span>)</span><br><span class="line">print(type(producer_entries))</span><br></pre></td></tr></table></figure><p>输出结果： <class 'bs4.element.tag'></class></p><p>通过文本查找：</p><p>直接字符串的话，查找的是标签。如果想要查找文本的话，则需要用到text参数。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ecologicalpyramid.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> ecological_pyramid:</span><br><span class="line">　　soup = BeautifulSoup(ecological_pyramid, <span class="string">'html'</span>)</span><br><span class="line">producer_string = soup.find(text = <span class="string">'plants'</span>)</span><br><span class="line">print(plants_string)</span><br></pre></td></tr></table></figure><p>输出：plants</p><p>通过正则表达式查找：</p><p>想找出第一个邮箱地址，但是第一个邮箱地址没有标签包含，所以通过其他方式很难找到。但是可以将邮箱地址进行正则表达式处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">email_id_example = <span class="string">"""&lt;br/&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;The below HTML has the information that has email ids.&lt;/div&gt; </span></span><br><span class="line"><span class="string">abc@example.com </span></span><br><span class="line"><span class="string">&lt;div&gt;xyz@example.com&lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;span&gt;foo@example.com&lt;/span&gt; </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(email_id_example)</span><br><span class="line">emailid_regexp = re.compile(<span class="string">"\w+@\w+\.\w+"</span>)　　　　<span class="comment"># regexp 表达式对象</span></span><br><span class="line">first_email_id = soup.find(text=emailid_regexp)　　</span><br><span class="line">print(first_email_id)</span><br></pre></td></tr></table></figure><p>输出结果：<a href="mailto:abc@example.com" target="_blank" rel="noopener">abc@example.com</a></p><p>通过标签属性进行查找：</p><p>上面html代码，其中第一个消费者在ul标签里面且id属性为priaryconsumer（priary consumer一次消费者，初级消费者）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'ecologicalpyramid.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> ecological_pyramid:</span><br><span class="line">    soup = BeautifulSoup(eccological_pyramid, <span class="string">'html'</span>)</span><br><span class="line">primary_consumer = soup.find(id=<span class="string">'primaryconsumers'</span>)</span><br><span class="line">print(primary_consumer.li.div.string)</span><br></pre></td></tr></table></figure><p>输出结果：deer</p><p>基于定制属性查找：</p><p>通过标签属性查找的方式适用大多数标签属性，包括id，style，title，但有 “-”，Class标签属性例外。</p><p>比如html5标签中的data-custom属性，如果我们这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">customattr = <span class="string">"""&lt;p data-custom='custom'&gt;custo attribute</span></span><br><span class="line"><span class="string">example&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">customsoup = BeautifulSoup(customattr, <span class="string">'lxml'</span>)</span><br><span class="line">customSoup.find(data-custom=<span class="string">"custom"</span>)</span><br></pre></td></tr></table></figure><p>那么则会报错。原因是在python中变量不能含有”-“这个字符，而我们传递的data-custom有这个字符。</p><p>解决办法是在attrs属性用字典进行传递参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using_attrs = customsoup.find(attrs=&#123;<span class="string">'data-custom'</span>:<span class="string">'custom'</span>&#125;)</span><br><span class="line">print(using_attrs)</span><br></pre></td></tr></table></figure><p>基于css类的查找：</p><p>class是python的保留关键字，所以无法使用class这个关键字。</p><p>第一种方法：在attrs属性用字典进行传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">css_class = soup.find(attrs=&#123;&apos;class&apos;:&apos;primaryconsumers&apos;&#125;)</span><br><span class="line">print(css_class)</span><br></pre></td></tr></table></figure><p>第二种方法：BeautifulSoup中的特别关键字参数class_。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css_class = soup.find(class_ = &apos;primaryconsumers&apos;)</span><br></pre></td></tr></table></figure><p>基于定义的函数进行查找：</p><p>可以传递函数到find()来基于函数定义的条件查找。函数必须返回True或False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_secondary_consumers</span><span class="params">(tag)</span>:</span></span><br><span class="line"><span class="keyword">return</span> tag.has_attr(<span class="string">'id'</span>) <span class="keyword">and</span> tag.get(<span class="string">'id'</span>) == <span class="string">'secondaryconsumers'</span></span><br><span class="line">secondary_consumer = soup.find(is_secondary_consumers)</span><br><span class="line">print(secondary_consumer.li.div.string)</span><br></pre></td></tr></table></figure><p>输出：fox</p><p>将方法进行组合后进行查找：</p><p>可以用其中任何方法进行组合进行查找，比如同时基于标签名和id号。</p><p><code>find_all()函数</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, limit, **kwargs)</span><br></pre></td></tr></table></figure><p><strong>limit</strong>参数可以限制得到的结果的数目。</p><p>参照前面的邮件地址例子，得到所有邮件地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">email_ids = soup.find_all(text=emailid_regexp)</span><br><span class="line">print(email_ids)</span><br></pre></td></tr></table></figure><p>输出结果：[<a href="mailto:u&#39;abc@example.com" target="_blank" rel="noopener">u&#39;abc@example.com</a>‘,<a href="mailto:u&#39;xyz@example.com" target="_blank" rel="noopener">u&#39;xyz@example.com</a>‘,<a href="mailto:u&#39;foo@example.com" target="_blank" rel="noopener">u&#39;foo@example.com</a>‘]</p><p>使用limit参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">email_ids_limited = soup.find_all(text=emailid_regexp, limit = <span class="number">2</span>)</span><br><span class="line">print(email_ids_limited)</span><br></pre></td></tr></table></figure><p>限制得到两个结果，所以输出结果：[<a href="mailto:u&#39;abc@example.com" target="_blank" rel="noopener">u&#39;abc@example.com</a>‘,<a href="mailto:u&#39;xyz@example.com" target="_blank" rel="noopener">u&#39;xyz@example.com</a>‘]</p><p>可以向find函数传递True或False参数，如果传递True给find_all()，则返回soup对象的所有标签。对于find()来说，则返回soup对象的第一个标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_texts = soup.find_all(text=<span class="literal">True</span>)</span><br><span class="line">print(all_texts)</span><br></pre></td></tr></table></figure><p>同样，可以在传递text参数时传递一个字符串列表，那么find_all()会找到挨个在列表中定义过的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_texts_in_list = soup.find_all(text=[<span class="string">'plants'</span>, <span class="string">'algae'</span>])</span><br><span class="line">print(all_texts_in_list)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">u'plants'</span>, <span class="string">u'alage'</span>]</span><br></pre></td></tr></table></figure><p>这个同样适用于查找标签，标签属性，定制属性和CSS类。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div_li_tags = soup.find_all([<span class="string">'div'</span>, <span class="string">'li'</span>])</span><br></pre></td></tr></table></figure><p>并且find()和find_all()都会查找一个对象所有后辈们，不过可以通过recursive参数控制。(recursive回归，递归)</p><p>如果recursive=False，只会找到该对象的最近后代。</p><p>通过标签之间的关系进行查找</p><p>查找父标签</p><p>通过find_parents()或find_parent()。它们之间的不同类似于find()和find_all()的区别。</p><p><strong>find_parents()返回全部的相匹配的父标签，而find_parent()返回最近一个父标签。适用于find()的方法同样适用于这两个方法。</strong></p><p>在第一消费者例子中，可以找到离Primaryconsumer最近的ul父标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">primaryconsumers = soup.find_all(class_ = <span class="string">'primaryconsumerlist'</span>)</span><br><span class="line">primaryconsumer = primaryconsumers[<span class="number">0</span>]</span><br><span class="line">parent_ul = primaryconsumer.find_parents(<span class="string">'ul'</span>)</span><br><span class="line">print(parent_ul)</span><br></pre></td></tr></table></figure><p>一个简单的找到一个标签的父标签的方法是使用find_parent()却不带任何参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">immediateprimary_consumer_parent = primary_consumer.find_parent()</span><br></pre></td></tr></table></figure><p>查找同胞</p><p>标签在同一个等级，这些标签是同胞关系，比如参照上面金子塔例子，所有的ul标签就是同胞的关系。上面的ul标签下的producers，primaryconsumers，，</p><p>secondaryconsumers，teriaryconsumers就是同胞关系。</p><p>div下的plants和algae不是同胞关系，但是plants和临近的number是同胞关系。</p><p>Beautiful Soup自带查找同胞的方法。</p><p>比如find_next_siblings()和find_next_sibling()查找对象下面的同胞。(sibling兄弟姐妹)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">producers = soup.find(id = <span class="string">'producers'</span>)</span><br><span class="line">next_siblings = producers.find_next_siblings()</span><br><span class="line">print(next_siblings)</span><br></pre></td></tr></table></figure><p>输出结果将会输出与之临近的下面的所有同胞html代码。</p><p>查找下一个</p><p>对每一个标签来说，下一个元素可能会是定位字符串，标签对象或者其他BeautifulSoup对象，我们定义下一个元素为当前元素最靠近的元素 。</p><p>这不用于同胞定义，我们有方法可以找到我们想要标签的下一个其他元素对象。find_all_next()找到与当前元素最靠近的所有对象。而find_next()找到离当前元素最接近的对象。</p><p>比如，找到在第一个div标签后的所有li标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first_div = soup.div</span><br><span class="line">all_li_tags = first_div.find_all_next(<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><p>查找上一个</p><p>与查找下一个相反的是查找前一个，用find_previous()和find_all_previous()。</p><h2 id="slwt的使用"><a href="#slwt的使用" class="headerlink" title="slwt的使用"></a>slwt的使用</h2><h2 id="代理IP的爬取"><a href="#代理IP的爬取" class="headerlink" title="代理IP的爬取"></a>代理IP的爬取</h2><hr><hr><p>【参考文章】</p><ul><li><a href="https://my.oschina.net/u/3914536/blog/1860929" target="_blank" rel="noopener">https://my.oschina.net/u/3914536/blog/1860929</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="python" scheme="https://albert-5.cn/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://albert-5.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://albert-5.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数学建模笔记</title>
    <link href="https://albert-5.cn/2019/07/03/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AC%94%E8%AE%B0/"/>
    <id>https://albert-5.cn/2019/07/03/数学建模笔记/</id>
    <published>2019-07-03T01:47:39.000Z</published>
    <updated>2019-07-11T01:49:14.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center> 数学交叉建模</center><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>顶点集合 $V={v ~1~, V ~2~， ······ }$</p><p>边集合 $E={e1, e2, e3,······}$</p><p>关系函数  $F(e)={u,v}$</p><p>图的表示就有 $ G={V, E, F}$</p><p>欧拉图特点： 线图，连通，无奇度顶点（<a href="https://zhidao.baidu.com/question/208310107.html）" target="_blank" rel="noopener">https://zhidao.baidu.com/question/208310107.html）</a></p><p>边与边之间有相邻不相邻关系：共顶点则为相邻关系，反之亦然；</p><p><strong>求欧拉巡回的算法：fleury算法，hierholzer算法</strong></p><p><strong>求最佳巡回算法：edmonds算法</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d1026df850f079658.png" alt="图" title>                </div>                <div class="image-caption">图</div>            </figure><blockquote><p>巡回是指从一点出发经过一系列移动之后又能回到初始顶点；</p><p>不具有b结构的称为简单图</p></blockquote><p><strong>二部图</strong></p><p>二部图与完全二部图：</p><p>若$V(G)=X∪Y$, $X∩Y=φ$ 且$X$中任意两顶点不相邻，$Y$ 中任意两顶点不相邻，则称为二部图或偶图；若$X$中每一顶点皆与$Y$ 中一切顶点相邻,称为 完全二部图或完全偶图,记为 $(m=|X|,n=|Y|)$ </p><p><img src="https://i.loli.net/2019/06/24/5d107463c6aea44467.png" alt="二部图"></p><p><strong>有向图</strong>：就是有方向的图</p><p><strong>加权图</strong>：图中的边上带有权重的图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d1074cfa603086041.png" alt="加权图" title>                </div>                <div class="image-caption">加权图</div>            </figure><p><strong>子图和生成子图</strong></p><p>子图：类似子集</p><p>生成子图：保留<code>原图顶点</code>，但是少了部分边</p><p><strong>路径和连通</strong></p><p>通路：只要可以走就行 <strong>walk</strong></p><p>道路：边不能重复，但顶点可以重复 <strong>Trail</strong></p><p>路径：顶点、边都不能重复</p><p><strong>圈</strong></p><p>定义：起点和终点重合的路径称为圈，长为K的圈称为k阶圈</p><p><code>起点和终点重合的道路称为闭通路</code></p><h3 id="图与网络的数据结构"><a href="#图与网络的数据结构" class="headerlink" title="图与网络的数据结构"></a>图与网络的数据结构</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>0不相邻，1相邻</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d10755ad4dc738663.png" alt="邻接矩阵" title>                </div>                <div class="image-caption">邻接矩阵</div>            </figure><p>1234567表示顶点，1表示相通，0表示不通；</p><p><strong>加权图的带权邻接矩阵 A=（W~ij~）n×n</strong></p><p>$w~ij~$$=\cases{权值&amp;$当Vi 与Vj 之间有边时$\cr 0&amp;$当i=j时$\cr∞&amp;$当Vi与Vj 之间无边时$\cr}$</p><p><strong>有向图的邻接矩阵 A=（W~ij~）n×n</strong></p><p>$aij$=$=\cases{1&amp;$若（vi,vj）∈E$\cr 0&amp;$若（vi,vj）∉E$\cr}$</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d107b9d2015311537.png" alt="有向图" title>                </div>                <div class="image-caption">有向图</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d107bf42bb1926417.png" alt="邻接矩阵" title>                </div>                <div class="image-caption">邻接矩阵</div>            </figure><p><strong>无向图的邻接矩阵  A=（W~ij~）n×n </strong></p><p>$a~ij~ $$=\cases{1&amp;$当Vi 与Vj 相邻$\cr 0&amp;$当Vi与Vj 不相邻$\cr}$</p><h4 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h4><p><strong>边矩阵</strong></p><p>定义一个m列的矩阵第1,2行分别存放百年的起点和终点</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/24/5d107c882f2e099187.png" alt="边矩阵" title>                </div>                <div class="image-caption">边矩阵</div>            </figure><h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><p>MATLAB命令</p><blockquote><p><a href="https://www.cnblogs.com/markReaper/p/8454817.html" target="_blank" rel="noopener">https://www.cnblogs.com/markReaper/p/8454817.html</a></p></blockquote><p><strong>最小生成树</strong></p><p>kruskal算法</p><p><strong>关于图论中的匹配问题</strong></p><p><a href="https://mengzelev.github.io/2018/11/28/matchings/" target="_blank" rel="noopener">https://mengzelev.github.io/2018/11/28/matchings/</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%8C%B9%E9%85%8D_(%E5%9B%BE%E8%AE%BA)" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%8C%B9%E9%85%8D_(%E5%9B%BE%E8%AE%BA)</a></p><p><a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener">https://www.renfei.org/blog/bipartite-matching.html</a></p><p>匹配：不相邻的边构成的集合</p><p>&lt;最大匹配，匹配，理想匹配&gt;</p><p>座位安排问题，任务分配问题（加权二部图的最大权匹配问题），旅行商问题TSP，最小费用流</p><hr><hr><h2 id="模糊聚类分析和模式识别"><a href="#模糊聚类分析和模式识别" class="headerlink" title="模糊聚类分析和模式识别"></a>模糊聚类分析和模式识别</h2><h3 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h3><p>聚类定义：通俗地说，聚类就是分类问题（没有任何关于分类的先验知识，仅靠事物的相似性作为类属划分的准则属于无监督范畴）</p><p>常用的模糊聚类分析方法：</p><blockquote><ul><li>基于模糊函数的聚类分析方法：模糊传递闭包法，直接聚类法，最大树法和编网法</li><li>基于目标函数的聚类分析方法：称为模糊C均值聚类算法</li></ul></blockquote><p><strong>模糊聚类分析</strong></p><p>建立在模糊相似矩阵之上对分类对象进行定量分类的方法</p><p><strong>主要内容</strong>有：数据标准化，建立模糊相似矩阵，动态聚类</p><h4 id="如何聚类分析"><a href="#如何聚类分析" class="headerlink" title="如何聚类分析"></a>如何聚类分析</h4><blockquote><ul><li>数据标准化</li><li>建立数据矩阵</li></ul><p>设论域$U={x~1~, x2, x3,······}$为被分类对象，每个对象又有m个指标表示性状，$xi={xi1,xi2·····xim}$，则得到原始数据矩阵$X=(x_{ij})_{n\times m}$</p><ul><li>标准差标准化 (使数据正规化，在$[0,1]$之间)</li></ul><p><strong>标准化方法</strong></p><p>​    极差正规化，极差标准化，最大值规格化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11e6a97caab93898.png" alt="123.png" title>                </div>                <div class="image-caption">123.png</div>            </figure><p><strong>用最大最小值构造模糊相似矩阵</strong></p></blockquote><p><strong>模糊相似矩阵</strong>    </p><blockquote><p><strong>定理</strong>：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11e76b6224160599.png" alt="相似系数法" title>                </div>                <div class="image-caption">相似系数法</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11e7aecf14155871.png" alt="夹角余弦法" title>                </div>                <div class="image-caption">夹角余弦法</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11e7f1b9dbf20014.png" alt="常用方法" title>                </div>                <div class="image-caption">常用方法</div>            </figure><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><p><strong>模糊等价矩阵</strong></p><p>定义：给定$U$上的一个模糊关系$R_{ij}=[r_{ij}]_{n\times n}$，若它满足：</p><ul><li>自反性（$r_{ij}=1$）</li><li>对称性（$r_{ij}=r_{ji}$）</li><li>传递性（$R\circ R \subseteq R$）</li></ul><p>称$R$是$U$上的一个模糊等价矩阵。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11e9aad9a6e31363.png" alt="传递性" title>                </div>                <div class="image-caption">传递性</div>            </figure><blockquote><p>相似性度量的相关、相似系数矩阵满足自反性和对称性，但不一定满足传递性。</p><p>对于传递性,可先计算$R○R(记作R^2)$,然后看其是否满足传递性。若不满足,经过$R○R=R^2, R^2○R^2=R^4 …$运 算,可将$R$改造成满足传递性的模糊等价矩阵;</p></blockquote><p><strong>模糊等价矩阵的$\lambda $截矩阵</strong></p><p> 设$R=[r_{ij}]<em>{n×n}$是模糊等价矩阵，对任意$λ∈[0,1]$，称$Rλ=[r</em>{ij}^{(λ)}]<em>{n×n}为$$R=[r</em>{ij}]_{n×n} λ$截矩阵，其中: </p><p><img src="https://i.loli.net/2019/06/25/5d11eb3e101d485378.png" alt="截矩阵1"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11eb6e3cf4a56835.png" alt="截矩阵2" title>                </div>                <div class="image-caption">截矩阵2</div>            </figure><p><strong>分类</strong></p><p>由模糊等价矩阵的$\lambda$截矩阵可知，当$r_{ij}=1$时，$i与j应为同类$，否则为异类</p><font color="blue">让$\lambda$ 由小到大变化，可形成动态聚类图</font><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11edbe0e1bb31830.png" alt="分类" title>                </div>                <div class="image-caption">分类</div>            </figure><p><strong>最佳阈值$\lambda$的确定</strong></p><ul><li>对于不同的$λ∈[0,1]$，可得不同的分类方案，从而 形成一种动态聚类图。这对全面了解对象的分类情 况是比较形象和直观的。但有的实际问题需要选择 某个阀值λ，确定一个具体的分类，这就是确定阀 值λ的问题。 </li></ul><p>&lt;动态聚类图&gt;</p><p><strong>用$F-统计量$ 确定$\lambda$的最佳值</strong></p><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11ee5bc344a91310.png" alt="最佳值的确定1" title>                </div>                <div class="image-caption">最佳值的确定1</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/25/5d11eea02b86242422.png" alt="最佳值的确定2" title>                </div>                <div class="image-caption">最佳值的确定2</div>            </figure></li></ul><h3 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h3><p><strong>隶属度和贴近度</strong></p><ul><li><p>隶属度</p><ul><li><p>模糊向量和内外积</p><p><strong>若</strong>0≤a<strong><em>i</em></strong>≤1(<strong>i</strong>=1,2,…,<strong><em>n</em></strong>),<strong><em>则称向量</em></strong>a=(<strong><em>a**</em></strong>1<em>,**</em>a<strong><em>2</em></strong>,…,<strong><em>a**</em></strong>n<em>)</em>为模糊向量。设<strong>a</strong>，<em>b**</em>是模糊向量，则分别称：</p><p><img src="https://i.loli.net/2019/06/25/5d11efc75f34797456.png" alt="123.png">     </p><p>​    为向量<em>a</em>与<em>b</em>内积和外积。符号$∧$和$∨$分别表示两个元素取小和取大。</p><p><img src="https://i.loli.net/2019/06/25/5d11f028b820c93741.png" alt="取大取小"></p></li></ul></li><li><p>最大隶属度原则</p><ul><li><p>原则1</p><p><img src="https://i.loli.net/2019/06/25/5d11f0802f28c31255.png" alt="原则1"></p></li><li><p>原则2</p><p><img src="https://i.loli.net/2019/06/25/5d11f0aaa3be669807.png" alt="原则2"></p></li></ul></li><li><p>贴近度</p><p>贴近度是描述模糊集之间彼此靠近程度的指标,是我国学者汪培庄教授提出的,由于研究的问题不同,贴近度也有不同的定义形式,它的一般定义为:</p><p>设<em>A</em>，<em>B</em>是论域$U$上的两个模糊子集，则称</p><p><img src="https://i.loli.net/2019/06/25/5d11f14cca4bd18065.png" alt></p><p>为<strong><font color="brown">A与B的贴近度</font></strong></p><ul><li>择近原则</li></ul></li></ul><h2 id="回归模型"><a href="#回归模型" class="headerlink" title="回归模型"></a>回归模型</h2><h4 id="相关关系基本概念"><a href="#相关关系基本概念" class="headerlink" title="相关关系基本概念"></a>相关关系基本概念</h4><h4 id="一元线性回归分析"><a href="#一元线性回归分析" class="headerlink" title="一元线性回归分析"></a>一元线性回归分析</h4><h4 id="一元回归模型的检验"><a href="#一元回归模型的检验" class="headerlink" title="一元回归模型的检验"></a>一元回归模型的检验</h4><h4 id="一元线性回归分析-1"><a href="#一元线性回归分析-1" class="headerlink" title="一元线性回归分析"></a>一元线性回归分析</h4><h4 id="多元线性回归分析"><a href="#多元线性回归分析" class="headerlink" title="多元线性回归分析"></a>多元线性回归分析</h4><h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><p><strong>非平稳序列的处理</strong></p><ul><li><p>$X_t=X_{t-1}+\delta_t$</p></li><li><p>$X_t=Z_t\times\delta_t, Z_t$~N(0,1)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Math" scheme="https://albert-5.cn/categories/Math/"/>
    
    
      <category term="数学建模" scheme="https://albert-5.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="图论" scheme="https://albert-5.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="回归" scheme="https://albert-5.cn/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>智能优化算法</title>
    <link href="https://albert-5.cn/2019/06/29/%E6%99%BA%E8%83%BD%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>https://albert-5.cn/2019/06/29/智能优化算法/</id>
    <published>2019-06-29T11:59:12.000Z</published>
    <updated>2019-06-29T12:01:45.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="智能优化算法"><a href="#智能优化算法" class="headerlink" title="智能优化算法"></a>智能优化算法</h1><h2 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h2><p><strong>Genetic Algorithm</strong>，简称<strong>GA</strong></p><ul><li><p>基本思想：</p><ul><li>根据问题的目标函数构造<strong>适值函数</strong>Fitness Function</li><li>产生一个初始种群</li><li>根据适值函数的好坏，不断的进行选择繁殖</li><li>若干代后得到适值函数最好的个体即为最优解。</li></ul></li><li><p>构成要素：</p><ul><li><p>种群 <strong>population</strong>     种群大小 <strong>pop-size</strong></p></li><li><p>种群表达法 – 编码方法</p></li><li><p>遗传算子 genetic operator</p><p>交叉 crossover   变异 mutation  </p><p><strong>交叉率高，解空间大，但计算时间较长</strong></p></li><li><p>选择策略</p><p>一般为正比选择</p><p><strong>选择种群中适值高的个体，适者生存</strong></p></li><li><p>停止准则</p><p>一般是指定最大迭代次数</p></li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/28/5d15caaa92ed790876.png" alt="GA算法流程图" title>                </div>                <div class="image-caption">GA算法流程图</div>            </figure><ul><li><p>解空间与编码空间的转换</p><p><img src="https://i.loli.net/2019/06/28/5d15cb05e84d380250.png" alt="空间变换"></p></li></ul><p><strong>各个步骤实现</strong></p><ul><li>初始种群的产生</li><li>编码方法</li><li>适值函数</li><li>遗传算法</li><li>选择策略</li><li>停止准则</li></ul><hr><p>$\Delta$ 初始种群的产生</p><p>  随机产生(依赖于编码方法)；种群的大小(依赖于计算机的计算能力和计算复杂度)。</p><p>  例：0,1编码</p><p>​    产生$\zeta_i\in U(0,1)$</p><p>​    $\zeta_i&gt;0.5,\quad x_i=1;$    </p><p>​    $\zeta_i&lt;0.5,\quad x_i=0;$</p><p>$\Delta$ 编码方法 –二进制编码</p><p>   二进制编码，用0,1字符串表达</p><p>   背包问题：0表示不取，1表示取</p><blockquote><p>特点：</p><p>精度高时编码较长，一般不采用此法而用实值函数</p><p>编码长不利于计算</p><p>便于位值计算，包括的实数范围大</p></blockquote><p>$\Delta$ 适值函数–根据目标函数设计</p><p>   用适值函数$F(x)$标定目标函数$f(x)$采用 <strong>-minf(x)</strong>和 <strong>manf(x)</strong></p><p>$\Delta$ 遗传运算–选择、交叉、变异</p><p>   $\bigstar$ 交叉 Crossover</p><p>​      $\heartsuit$ 单切点交叉</p><p>​    随机产生一个断点 $[1,n-1]$</p><p>​        <img src="https://i.loli.net/2019/06/28/5d15cf8d292d659120.png" alt="单切点交叉"></p><p>​      $\heartsuit$ 双切点交叉</p><p>​    <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/28/5d15cfc3722ea67954.png" alt="双切点交叉" title>                </div>                <div class="image-caption">双切点交叉</div>            </figure></p><p>   $\bigstar$ 变异 Mutation</p><p>​      初始种群中没有需要的基因，在种群中按变异概率$\ P_m$任选若干位基因改变位值0→1或1→0，</p><p>有意想不到的结果，$\ P_m$一般设定得比较小，在5%以下。 </p><p>   $\bigstar$ 选择</p><p>​      最常用的正比选择</p><p>​      对于个体$i$，适值$F_i$，选择概率如下公式计算<br>$$<br>P_i={F_i \over{\sum_{1}^{NP}F_i}}<br>$$</p><p>$$<br>NP–Number of Population<br>$$</p><p>​     之后采用轮盘赌的方法进行选择：</p><p>​     令$PP_0=0，PP_i=\sum_{j=1}^{i} P_j$</p><p>​     随机产生 $\varepsilon_i \in U(0,1)$</p><p>​     当 $PP_i \le \varepsilon_i \le PP_i$,选择个体 $i$，</p><h2 id="粒子群算法"><a href="#粒子群算法" class="headerlink" title="粒子群算法"></a>粒子群算法</h2><p> <strong>Particle Swarm Optimization</strong></p><ul><li><p>基本思想</p><ul><li><p>粒子群算法q粒子群算法的思想源于对鸟群捕食行为的研究</p></li><li><p>模拟鸟集群飞行觅食的行为，鸟之间通过集体的协作使群体达到最优目的，是一种基于Swarm Intelligence的优化方法。</p></li><li><p>马良教授在他的著作《蚁群优化算法》一书的前言中写到：</p><blockquote><p>“自然界的蚁群、鸟群、鱼群、羊群、牛群、蜂群等，其实时时刻刻都在给予我们以某种启示，只不过我们常常忽略了大自然对我们的最大恩赐！……”</p></blockquote></li></ul></li><li><p>算法介绍</p><ul><li>每个寻优的问题解都被想像成一只鸟，称为“粒子”。所有粒子都在一个D维空间进行搜索。</li><li>所有的粒子都由一个fitness function 确定适应值以判断目前的位置好坏。</li><li>每一个粒子必须赋予记忆功能，能记住所搜寻到的最佳位置。</li><li>每一个粒子还有一个速度以决定飞行的距离和方向。这个速度根据它本身的飞行经验以及同伴的飞行经验进行动态调整。 </li></ul></li></ul><p><strong>细说PSO</strong></p><p>D维空间中，有N个粒子；</p><p>​    粒子$i$位置：$x_i=(x_{i1},x_{i2},\cdots x_{iD})$，将$x_{i}$代入适应函数$f(x_i)$求适应值；</p><p>​    粒子$i$速度：$v_i=(v_{i1},v_{i2},\cdots v_{iD})$</p><p>​    粒子$i$个体经历过的最好位置：$pbest_i=(p_{i1},p_{i2},…p_{iD})$ </p><p>​    种群所经历过的最好位置：$gbest=(g_1,g_2,…g_D)$</p><p>通常，在第$d（1≤d≤D）$维的位置变化范围限定在$[X_{min, d},X_{max,d}]$内,速度变化范围限定在$[-V_{min,d},V_{max,d}]$内（即在迭代中若$v_{id},x_{id}$超出了边界值，则该维的速度或位置被限制为该维最大速度或边界位置）</p><ul><li><p>粒子$i$的第$d$维速度更新公式：<br>$$<br>v_{id}^{k}=\omega v_{id}^{k-1}+c_1r_1(pbest_{id}-x_{id}^{k-1})+c_2r_2(gbest_d-x_{id}^{k-1})<br>$$</p></li><li><p>粒子$i$的第$d$维位置更新公式<br>$$<br>x_{id}^{k}=x_{id}^{k-1}+v_{id}^{k-1}<br>$$<br>$v_{id}^{k}$–表示第$k$次迭代粒子$i$飞行速度的矢量的第$d$维分量</p><p>$x_{id}^{k}$–表示第$k$次迭代粒子$i$位置矢量的第$d$维分量</p><p>$c_1,c_2$–表示加速度常数，调节学习最大步长</p><p>$r_1,r_2$–表示两个随机函数，取值范围为$[0,1]$，以增加搜索随机性</p><p>$w$–表示惯性 权重，非负数，调节对解空间的搜索范围</p></li></ul><p><strong>算法流程</strong></p><blockquote><p>1.Initial：</p><p>初始化粒子群体（群体规模为n），包括随机位置和速度。</p><p>2.Evaluation：</p><p>根据fitness function ，评价每个粒子的适应度。</p><p>3.Find the Pbest：</p><p>对每个粒子，将其当前适应值与其个体历史最佳位置（pbest）对应的适应值做比较，如果当前的适应值更高，则将用当前位置更新历史最佳位置pbest。</p><p>4.Find the Gbest：</p><p>对每个粒子，将其当前适应值与全局最佳位置（gbest）对应的适应值做比较，如果当前的适应值更高，则将用当前粒子的位置更新全局最佳位置gbest。</p><p>5.Update the Velocity：</p><p>根据公式更新每个粒子的速度与位置。</p><p>6.如未满足结束条件，则返回步骤2</p><p>​    通常算法达到最大迭代次数$G_{max}$或者最佳适应度值的增量小于某个给定的阈值时算法停止。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/28/5d15e714c42cc19599.png" alt="粒子群算法" title>                </div>                <div class="image-caption">粒子群算法</div>            </figure><ul><li><p>构成要素 群体大小$m$</p><p>$m$是一个整型参数，$m$很小时，陷入局部最优解的可能性就越大；$m$很大时，pso的优化能力很好。当群体数目增长至一定水平时，再增长将不再有显著的作用。</p></li><li><p>权重因子</p><p><img src="https://i.loli.net/2019/06/28/5d15e808ca9b121743.png" alt="权重因子"></p></li><li><p>最大速度 $V_m$</p><p>在于维护算法的探索能力与开发能力的平衡</p><p>$V_m$较大时额，探索能力增强，但粒子容易飞过最优解；$V_m$较小时，开发能力增强，但容易陷入局部最优解；因此$V_m$一般设为每维变量变化范围的$10\%-20\%$</p></li><li><p>邻域的拓扑结构</p><ul><li><p>将群体内所有个体都作为粒子的邻域</p></li><li><p>只将群体中的部分个体作为粒子的邻域</p><p>邻域拓扑结构$\rightarrow^{决定}$群体历史最优解</p><font color="blue">因此，将粒子群算法分为 全局粒子群算法和局部粒子群算法</font><ul><li><p>全局粒子群算法</p><ul><li>粒子自己历史最优解</li><li>粒子群体的全局最优解</li></ul></li><li><p>局部粒子群算法</p><ul><li>粒子自己历史最优解</li><li>粒子邻居内粒子的最优解</li></ul><p>邻域随迭代次数的增加线性变大，最后邻域拓展到整个粒子群。</p></li></ul></li></ul></li><li><p>粒子空间的初始化</p><p>较好地选择粒子空间的初始化空间，将大大缩短收敛时间，初始化空间根据具体问题的不同而不同，也就是说这是问题依赖的。</p></li></ul><p><strong>算法流程</strong></p><ul><li><p>在初始化范围内，对粒子群进行随机初始化，包括随机位置和速度</p></li><li><p>计算每个粒子的适应值</p></li><li><p>更新粒子个体的历史最优位置</p></li><li><p>更新粒子群体的历史最优位置</p></li><li><p>更新粒子的速度和位置，公式如下：<br>$$<br>v_{k+1}=c_0v_k+c_1\xi (p_k-x_k)+c_2\eta(p_k-x_k)<br>$$</p><p>$$<br>x_{k+1}=x_k+v_{k+1}<br>$$</p></li><li><p>若未达到终止条件，则转第二步</p></li></ul><p><strong>惯性权重 $\omega $</strong></p><p>  描述的是粒子上一代速度对当前速度的影响，$\omega$较大时，全局寻优能力强，局部寻优能力弱；反之，则局部寻优能力强。当问题空间较大时，为了在搜索速度沙河搜索精度之间达到平衡，通常是使算法在前期有较高的全局搜索能力以得到合适的种子，而在后期有较高的局部搜索能力以提高收敛精度。<br>$$<br>w=w_{max}-(w_{max-w_{min}})\times {run\over run_{max}}<br>$$<br>$w_{max}最大惯性权重，w_{min}最小惯性权重，run当前迭代次数，run_{max}为算法迭代总次数$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="优化算法" scheme="https://albert-5.cn/categories/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="遗传算法" scheme="https://albert-5.cn/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="粒子群算法" scheme="https://albert-5.cn/tags/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>课程</title>
    <link href="https://albert-5.cn/2019/06/21/%E8%AF%BE%E7%A8%8B/"/>
    <id>https://albert-5.cn/2019/06/21/课程/</id>
    <published>2019-06-21T07:14:35.000Z</published>
    <updated>2019-06-21T07:16:19.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通识课程平台"><a href="#通识课程平台" class="headerlink" title="通识课程平台"></a>通识课程平台</h2><h3 id="通识必修课程（最少修读31学分）"><a href="#通识必修课程（最少修读31学分）" class="headerlink" title="通识必修课程（最少修读31学分）"></a>通识必修课程（最少修读31学分）</h3><ul><li style="list-style: none"><input type="checkbox" checked> 军事理论训练  2</li><li style="list-style: none"><input type="checkbox" checked> 英语1   3</li><li style="list-style: none"><input type="checkbox" checked> 体育1  1</li><li style="list-style: none"><input type="checkbox" checked> 体育2  1</li><li style="list-style: none"><input type="checkbox" checked> 民族理论与民族政策  2</li><li style="list-style: none"><input type="checkbox" checked> 思修  3</li><li style="list-style: none"><input type="checkbox" checked> 英语2  3</li><li style="list-style: none"><input type="checkbox" checked> 体育3 1</li><li style="list-style: none"><input type="checkbox" checked> 毛概  6</li><li style="list-style: none"><input type="checkbox" checked> 体育4  1</li><li style="list-style: none"><input type="checkbox" checked> 马原  3</li><li style="list-style: none"><input type="checkbox" checked> 近代史  2             ————28分————–</li><li style="list-style: none"><input type="checkbox" checked> 形策（一部分应该）</li><li style="list-style: none"><input type="checkbox"> 就业指导</li></ul><h3 id="通识选修课程（选修文科类课程最少修读4分）"><a href="#通识选修课程（选修文科类课程最少修读4分）" class="headerlink" title="通识选修课程（选修文科类课程最少修读4分）"></a>通识选修课程（选修文科类课程最少修读4分）</h3><h3 id="通识选修课程（最少修读6学分）"><a href="#通识选修课程（最少修读6学分）" class="headerlink" title="通识选修课程（最少修读6学分）"></a>通识选修课程（最少修读6学分）</h3><h3 id="大学生英语扩展课程（最少6学分）"><a href="#大学生英语扩展课程（最少6学分）" class="headerlink" title="大学生英语扩展课程（最少6学分）"></a>大学生英语扩展课程（最少6学分）</h3><ul><li style="list-style: none"><input type="checkbox" checked> 英语3  3</li><li style="list-style: none"><input type="checkbox"> 英语4  3</li><li style="list-style: none"><input type="checkbox"> 高级媒体视听说  3</li><li style="list-style: none"><input type="checkbox"> 学术英语阅读与写作 <strong>&lt;应该可以用 创意写作 代替&gt; </strong> 3</li><li style="list-style: none"><input type="checkbox"> 中国文化概况   3</li><li style="list-style: none"><input type="checkbox"> 英语国家社会与文化入门 <strong>&lt;应该可以用 跨文化交际 代替&gt;</strong>  3</li></ul><h2 id="学科基础平台（学科基础必修课程）"><a href="#学科基础平台（学科基础必修课程）" class="headerlink" title="学科基础平台（学科基础必修课程）"></a>学科基础平台（学科基础必修课程）</h2><ul><li style="list-style: none"><input type="checkbox" checked> 高等数学A(1)</li><li style="list-style: none"><input type="checkbox" checked> 线性代数</li><li style="list-style: none"><input type="checkbox" checked> 计算机基础</li><li style="list-style: none"><input type="checkbox" checked> 自动化类专业导论</li><li style="list-style: none"><input type="checkbox" checked> 程序设计语言</li><li style="list-style: none"><input type="checkbox" checked> 高等数学A(2)</li><li style="list-style: none"><input type="checkbox" checked> 大学物理B(1)</li><li style="list-style: none"><input type="checkbox" checked> 大学物理B(1)实验</li><li style="list-style: none"><input type="checkbox" checked> 大学物理B(2)</li><li style="list-style: none"><input type="checkbox"> 大学物理B(2)实验</li><li style="list-style: none"><input type="checkbox" checked> 工程制图与CAD</li><li style="list-style: none"><input type="checkbox" checked> 电路原理</li><li style="list-style: none"><input type="checkbox" checked> 信号与系统分析</li><li style="list-style: none"><input type="checkbox" checked> 模拟电子技术</li><li style="list-style: none"><input type="checkbox" checked> 概率论</li><li style="list-style: none"><input type="checkbox" checked> 复变函数</li><li style="list-style: none"><input type="checkbox" checked> 数字电子技术</li><li style="list-style: none"><input type="checkbox"> 微机原理  <strong>计算机科学学院的课</strong></li><li style="list-style: none"><input type="checkbox"> 软件技术基础</li></ul><h2 id="专业课程（最少修读43学分）"><a href="#专业课程（最少修读43学分）" class="headerlink" title="专业课程（最少修读43学分）"></a>专业课程（最少修读43学分）</h2><h3 id="专业选修（最少修读19学分）"><a href="#专业选修（最少修读19学分）" class="headerlink" title="专业选修（最少修读19学分）"></a>专业选修（最少修读19学分）</h3><ul><li style="list-style: none"><input type="checkbox"> 运筹学  2  <strong>已选</strong></li><li style="list-style: none"><input type="checkbox"> 专业应用软件 <strong>数学实验代替</strong>  2.5</li><li style="list-style: none"><input type="checkbox" checked> 自动化专业英语  2 </li><li style="list-style: none"><input type="checkbox"> EDA技术</li><li style="list-style: none"><input type="checkbox"> 数据库原理与应用  2.5 <strong>已选</strong></li><li style="list-style: none"><input type="checkbox"> 操作系统原理</li><li style="list-style: none"><input type="checkbox"> 近代控制理论</li><li style="list-style: none"><input type="checkbox"> 数字信号处理</li><li style="list-style: none"><input type="checkbox"> 控制系统仿真</li><li style="list-style: none"><input type="checkbox"> 智能仪表</li><li style="list-style: none"><input type="checkbox"> 网络与通信技术  2.5</li><li style="list-style: none"><input type="checkbox"> 计算机控制系统</li><li style="list-style: none"><input type="checkbox"> PLC技术与应用</li><li style="list-style: none"><input type="checkbox"> 嵌入式技术与应用</li><li style="list-style: none"><input type="checkbox"> DSP技术与应用</li><li style="list-style: none"><input type="checkbox"> 管理信息系统</li><li style="list-style: none"><input type="checkbox"> 人工智能导论</li><li style="list-style: none"><input type="checkbox"> 模式识别导论  2.5</li><li style="list-style: none"><input type="checkbox"> 计算机图象处理</li><li style="list-style: none"><input type="checkbox"> 机器人导论 <strong>&lt;可以用 机器人探秘 代替&gt;</strong></li><li style="list-style: none"><input type="checkbox"> 现场总线与测控网络</li><li style="list-style: none"><input type="checkbox"> 人工神经网络导论  2</li><li style="list-style: none"><input type="checkbox"> 最优控制技术  2</li><li style="list-style: none"><input type="checkbox"> 机器学习导论  2</li><li style="list-style: none"><input type="checkbox"> 过程控制系统  </li><li style="list-style: none"><input type="checkbox"> 运动控制系统  2.5</li><li style="list-style: none"><input type="checkbox"> 无线通讯网络</li></ul><h3 id="专业必修（最少修读24学分）"><a href="#专业必修（最少修读24学分）" class="headerlink" title="专业必修（最少修读24学分）"></a>专业必修（最少修读24学分）</h3><ul><li style="list-style: none"><input type="checkbox"> 电机及拖动基础</li><li style="list-style: none"><input type="checkbox"> 自动控制原理</li><li style="list-style: none"><input type="checkbox"> 检测技术</li><li style="list-style: none"><input type="checkbox"> 功率电子技术</li><li style="list-style: none"><input type="checkbox"> 电器控制技术</li><li style="list-style: none"><input type="checkbox"> 单片机技术与应用</li></ul><h2 id="实践教学平台（最少修读26-5学分）"><a href="#实践教学平台（最少修读26-5学分）" class="headerlink" title="实践教学平台（最少修读26.5学分）"></a>实践教学平台（最少修读26.5学分）</h2><h3 id="实践教学（最少6-5学分）"><a href="#实践教学（最少6-5学分）" class="headerlink" title="实践教学（最少6.5学分）"></a>实践教学（最少6.5学分）</h3><h4 id="社会实践（最少1-5学分）"><a href="#社会实践（最少1-5学分）" class="headerlink" title="社会实践（最少1.5学分）"></a>社会实践（最少1.5学分）</h4><ul><li style="list-style: none"><input type="checkbox" checked> 自动化类社会实践1</li><li style="list-style: none"><input type="checkbox"> 自动化类社会实践2</li><li style="list-style: none"><input type="checkbox"> 自动化类社会实践3</li></ul><h4 id="课程设计（最少5学分）"><a href="#课程设计（最少5学分）" class="headerlink" title="课程设计（最少5学分）"></a>课程设计（最少5学分）</h4><ul><li style="list-style: none"><input type="checkbox"> 软件技术课程设计</li><li style="list-style: none"><input type="checkbox"> 电子技术课程设计</li><li style="list-style: none"><input type="checkbox"> 单片机课程设计</li><li style="list-style: none"><input type="checkbox"> 控制技术课程设计</li></ul><h3 id="教学实习（最少修读15学分）"><a href="#教学实习（最少修读15学分）" class="headerlink" title="教学实习（最少修读15学分）"></a>教学实习（最少修读15学分）</h3><h4 id="教学实习（最少修读3学分）"><a href="#教学实习（最少修读3学分）" class="headerlink" title="教学实习（最少修读3学分）"></a>教学实习（最少修读3学分）</h4><ul><li style="list-style: none"><input type="checkbox" checked> 金工实习</li><li style="list-style: none"><input type="checkbox" checked> 电子技术工艺实习</li><li style="list-style: none"><input type="checkbox"> 生产实习</li></ul><h4 id="毕业实习（最少修读2学分）"><a href="#毕业实习（最少修读2学分）" class="headerlink" title="毕业实习（最少修读2学分）"></a>毕业实习（最少修读2学分）</h4><ul><li style="list-style: none"><input type="checkbox"> 毕业实习</li></ul><h4 id="毕业论文（设计）【最少修读10学分】"><a href="#毕业论文（设计）【最少修读10学分】" class="headerlink" title="毕业论文（设计）【最少修读10学分】"></a>毕业论文（设计）【最少修读10学分】</h4><ul><li style="list-style: none"><input type="checkbox"> 毕业论文</li></ul><h3 id="创新创业平台（最少修读5学分）"><a href="#创新创业平台（最少修读5学分）" class="headerlink" title="创新创业平台（最少修读5学分）"></a>创新创业平台（最少修读5学分）</h3><ul><li style="list-style: none"><input type="checkbox"> 创新学分（最少修读3学分）</li><li style="list-style: none"><input type="checkbox" checked> 创业学分  <strong>已经修超了</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="college" scheme="https://albert-5.cn/categories/college/"/>
    
    
      <category term="大学课程" scheme="https://albert-5.cn/tags/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Waring</title>
    <link href="https://albert-5.cn/2019/06/14/Waring/"/>
    <id>https://albert-5.cn/2019/06/14/Waring/</id>
    <published>2019-06-14T12:38:56.000Z</published>
    <updated>2019-09-08T07:18:39.639Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="拒绝伸手党！"><a href="#拒绝伸手党！" class="headerlink" title="拒绝伸手党！"></a>拒绝伸手党！</h1><h2 id="什么是伸手党"><a href="#什么是伸手党" class="headerlink" title="什么是伸手党"></a>什么是伸手党</h2><p>伸手党其实指的是一类人，这一类人有的是出于不懂事而产生的伸手现象的未成年人，有的是依赖性极强的成年人，伸手党大致有以下特征：</p><ul><li><p>任何资源（图片、音乐、链接等）都只想通过他人直接获得</p></li><li><p>虚拟社区（线上游戏、讨论区）中的讨要点卡、高级账号者</p></li><li><p>理直气壮的向别人索要他人成果                                                      </p></li><li><p>他人发布的消息以及通知等不认真阅读，反复询问者【自己定义】</p><p>​                                                                                                                     ———————-来源于百度百科                                                           </p></li></ul><h2 id="为什么会有伸手党"><a href="#为什么会有伸手党" class="headerlink" title="为什么会有伸手党"></a>为什么会有伸手党</h2><p>我感觉伸手党的存在一定程度上反映了个人的一些所谓<strong>懒</strong>的行为，自己不想去寻找或者付出努力，一味的寻求他人，希望别人直接把资源或者自己想要的东西发给你，他们都要类似的表现，例如<strong>什么问题直接来问而不是先去搜索一下如何进行解决</strong>。连说明书都懒得去看，也不想着如何去做，失去了学习的能力，也不会想着提升自己。而且能「Google」的就别「百度」，原因你懂的，这时估计会有人说了，你能上谷歌？怎么弄的的 。。。。。。。【WTF 我竟无言以对】</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/14/5d038b35e7a7e16857.jpg" alt="原罪" title>                </div>                <div class="image-caption">原罪</div>            </figure><p>但是话说过来，又有谁没有做过伸手党呢？你敢说小时候没有抄过作业？【哈，作业写完了吗？借鉴一下呗】，哎呀，真香！但是这只是曾经，那是小时候，玩是天性，不想现在自己要去忙活学习之外的事情，<strong>经历、成长、适应社会</strong>，再做伸手党恐怕有点过分哦~</p><h2 id="自己定义的伸手党"><a href="#自己定义的伸手党" class="headerlink" title="自己定义的伸手党"></a>自己定义的伸手党</h2><p><strong>为什么会把这个列为伸手党，我感觉此等行为和伸手党行为莫名的一致。</strong></p><p>虽说不是音乐、视频等资源，但是作为一种信息的阅览，其中包含的也是一种资源。</p><p>【辅导员】【班长】【各大社团】等一系列的通知，公告等漫天飞舞，还有无尽的【@全体成员】铺天盖地，大多数还都是认真阅读后提出自己的疑问，但总有一些<strong>特例</strong>不去仔细阅读通知内容，一股劲的@管理询问</p><ul><li>这个活动时什么时候开始啊，地点在哪啊</li><li>活动的具体形式是什么呀</li><li>将个人照片交到某某楼某某教室某某老师，则会有人问了 <code>纸质的还是电子照片啊</code>，<code>老师什么时候在啊</code></li><li>$\cdots\cdots$</li></ul><h2 id="拒绝伸手党"><a href="#拒绝伸手党" class="headerlink" title="拒绝伸手党"></a>拒绝伸手党</h2><p>我们大多时候都会遇到这种情况，很简单，不理会就是了。一些明显的能一个「谷歌」解决的问题，有什么必要去回复呢？到最后只能回复一句 <code>请仔细阅读公告内容！</code></p><p>或者直接无奈的给你这个：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/14/5d038f8c69f4d18531.png" alt="So what?" title>                </div>                <div class="image-caption">So what?</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/14/5d039e7a7b1db19636.png" alt="啊哈" title>                </div>                <div class="image-caption">啊哈</div>            </figure><h2 id="如何避免成为伸手党"><a href="#如何避免成为伸手党" class="headerlink" title="如何避免成为伸手党"></a>如何避免成为伸手党</h2><ul><li>善于利用工具：遇到问题先经过自己的<strong>思考</strong>，实在没有主意就去<a href="https://www.google.com/" target="_blank" rel="noopener">Google</a> 或者<a href="https://baidu.com" target="_blank" rel="noopener">Baidu</a>寻找提示或者思路，人人都能及格甚至优秀，奈何你连翻书都不会</li><li>承认自己的渺小和无知：一个人说出【我不知道】【我不了解】可能会很难，但是正因为你不知道，所以你才要去不断的学习，只有这样或许才能不断的进步，如果连这种勇气都没有，成功？恐怕只是一个梦</li><li>信息要读Carefully：接到通知或者公告，要自己阅读，不能看到活动通知就说什么时候开始，什么形式，举办方花费精力做的文案<strong>可不是白纸，还有黑字</strong>呢</li><li>学好英语：学好英语更好的利用谷歌工具，更好的看懂论文文献，更好的交流和学习，这里检讨一下自己，曾经英语不努力，现在交流mmp。</li><li>做好自己的人生规划吧！</li></ul><center><font color="#138D75">本内容不针对任何人，只是提醒自己不要做伸手党</font></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Waring" scheme="https://albert-5.cn/categories/Waring/"/>
    
    
      <category term="伸手er" scheme="https://albert-5.cn/tags/%E4%BC%B8%E6%89%8Ber/"/>
    
      <category term="自我警告" scheme="https://albert-5.cn/tags/%E8%87%AA%E6%88%91%E8%AD%A6%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Wechat爬取好友信息</title>
    <link href="https://albert-5.cn/2019/06/12/Wechat%E7%88%AC%E5%8F%96%E5%A5%BD%E5%8F%8B%E4%BF%A1%E6%81%AF/"/>
    <id>https://albert-5.cn/2019/06/12/Wechat爬取好友信息/</id>
    <published>2019-06-12T13:49:31.000Z</published>
    <updated>2019-06-13T17:13:01.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信好友-一览无余"><a href="#微信好友-一览无余" class="headerlink" title="微信好友 一览无余"></a><strong>微信好友 一览无余</strong></h1><p>【itchat】一个微信的开源<strong>API</strong>，微信是一种常用的社交网络应用程序。</p><p>通过python中的聊天访问个人微信账户，然后通过微信机器人进行处理个人所有基本信息。</p><h3 id="安装itchat模块"><a href="#安装itchat模块" class="headerlink" title="安装itchat模块"></a>安装itchat模块</h3><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install itchat</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line">itchat.auto_login()</span><br><span class="line">itchat.send(<span class="string">'Hello, filehelper'</span>, toUserName=<span class="string">'filehelper'</span>)</span><br></pre></td></tr></table></figure><p>详情见<a href="https://pypi.org/project/itchat/" target="_blank">itchat官方网站</a></p><p><strong>主要用到的方法有：</strong></p><ul><li><code>itchat.login()</code>微信扫码登录</li><li><code>itchat.get_friends()</code>返回完整的列表好友，每个好友为一个字典，其中第一项为自己的账号基本信息，带入参数<code>update=True</code>，将更新好友列表并返回，具体使用<code>itchat.get_friends(update=True)</code></li></ul><blockquote><p>技巧：使用<code>itchat.login()</code>进行登录微信会有一个问题，就是每运行一次就会生成一个二维码，叮··· 扫描登录，是不是过于麻烦了？ 直接采用<code>itchat.auto_login()</code>，在一定时间内，可以不用扫码登录，只需要在手机移动端确定登录就行了，毕竟是在模拟网页登录</p></blockquote><h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需要的库</span></span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 启用热键扫码登录微信</span></span><br><span class="line">itchat.auto_login(hotReload=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 抓取好友信息</span></span><br><span class="line">friends = itchat.get_friends(update=<span class="literal">True</span>)[<span class="number">0</span>:]</span><br></pre></td></tr></table></figure><p>这时，好友信息已经在存储在<strong>friends</strong>里面了。</p><p><strong>定义函数抓取个字段信息get_var(var)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_var</span><span class="params">(var)</span>:</span></span><br><span class="line">    variable = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> friends:</span><br><span class="line">        value = i[var]</span><br><span class="line">        variable.append(value)</span><br><span class="line">    <span class="keyword">return</span> variable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数得到各个变量,存在csv文件中</span></span><br><span class="line">NickName = get_var(<span class="string">'NickName'</span>)</span><br><span class="line">Sex = get_var(<span class="string">'Sex'</span>)</span><br><span class="line">Province = get_var(<span class="string">'Province'</span>)</span><br><span class="line">City = get_var(<span class="string">'City'</span>)</span><br><span class="line">Signature = get_var(<span class="string">'Signature'</span>)</span><br><span class="line">Username = get_var(<span class="string">'UserName'</span>)</span><br><span class="line">ContactFlag = get_var(<span class="string">'ContactFlag'</span>)</span><br><span class="line">SnsFlag = get_var(<span class="string">'SnsFlag'</span>)</span><br></pre></td></tr></table></figure><p><strong>定义函数parse_friends()</strong>，将得到的好友数据存储在txt文本中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 收集并保存好友信息数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_friends</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 设置需要爬取的信息字段,使用字典形式,参考官网以及个人需求设置字段信息</span></span><br><span class="line">    result = &#123;<span class="string">'NickName'</span>: NickName, <span class="string">'Sex'</span>: Sex, <span class="string">'Province'</span>: Province, <span class="string">'City'</span>: City, <span class="string">'UserName'</span>: Username,</span><br><span class="line">            <span class="string">'ContactFlag'</span>: ContactFlag, <span class="string">'SnsFlag'</span>: SnsFlag, <span class="string">'Signature'</span>: Signature, &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> friends:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'myfriends.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fh:</span><br><span class="line">            fh.write(<span class="string">'-------------------------\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'myfriends.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fh:</span><br><span class="line">                fh.write(str(r) + <span class="string">":"</span> + str(user.get(r))+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"分析完毕！"</span>)</span><br></pre></td></tr></table></figure><center>设置最后打印标识，提醒已完成信息存储；<br><br><center>同时当前文件夹中出现一个文件<code>myfriends.txt</code></center><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/12/5d010091e02f920002.png" alt="信息文件" title>                </div>                <div class="image-caption">信息文件</div>            </figure><hr><p><strong>定义函数male_female()</strong>统计男女以及其他人数和比例</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/12/5d00ff1a51a3891536.png" alt="统计" title>                </div>                <div class="image-caption">统计</div>            </figure><p><strong>然后利用pandas</strong>模块将文件信息保存在<a href="https://baike.baidu.com/item/CSV/10739" target="_blank" rel="noopener">csv文件</a>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'NickName'</span>: NickName, <span class="string">'Sex'</span>: Sex, <span class="string">'Province'</span>: Province, <span class="string">'City'</span>: City, <span class="string">'UserName'</span>: Username, <span class="string">'ContactFlag'</span>: ContactFlag, <span class="string">'SnsFlag'</span>:SnsFlag, <span class="string">'Signature'</span>:Signature, &#125;</span><br><span class="line">frame = DataFrame(data)</span><br><span class="line">frame.to_csv(<span class="string">'data2.csv'</span>, index=<span class="literal">True</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data2.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> myfile:</span><br><span class="line">    reader = csv.reader(myfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">         print(row)</span><br></pre></td></tr></table></figure><center>便于后续采用pandas中的 <strong>value_counts</strong> 进行计数可视化处理</center><hr><p><strong>简单可视化操作</strong></p><p><strong>采用pyecharts中的Pie绘制饼图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">configure(output_image=<span class="literal">True</span>)</span><br><span class="line">pie = Pie(<span class="string">"性别比例"</span>, background_color=<span class="string">'white'</span>, title_text_size=<span class="number">25</span>)</span><br><span class="line">attr = [<span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'other'</span>]</span><br><span class="line">v1 = [<span class="number">57.14</span>, <span class="number">27.04</span>, <span class="number">15.82</span>]  <span class="comment"># 好友男女百分比</span></span><br><span class="line">pie.add(<span class="string">''</span>, attr, v1, is_label_show=<span class="literal">True</span>)</span><br><span class="line">pie.render() <span class="comment"># render渲染，默认在当前文件夹中的render.html</span></span><br></pre></td></tr></table></figure><blockquote><p>再使用pyecharts时，可能会出现一些错误，比如不存在Pie或者无法导入Pie等</p><p>看了一些博客之后，我采用的方法是降级，即降低库的版本，可能是与python版本有冲突</p></blockquote><p><strong>效果</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/14/5d028204f24df25475.png" alt="比例.png" title>                </div>                <div class="image-caption">比例.png</div>            </figure><center>或许这就是你Single的原因吧 –苦笑–<br></center></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Wechat爬虫" scheme="https://albert-5.cn/categories/Wechat%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://albert-5.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="微信" scheme="https://albert-5.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>算法导论复习</title>
    <link href="https://albert-5.cn/2019/06/02/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E5%A4%8D%E4%B9%A0/"/>
    <id>https://albert-5.cn/2019/06/02/算法导论复习/</id>
    <published>2019-06-02T06:22:04.000Z</published>
    <updated>2019-06-23T15:28:06.707Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>算法复习</center><h5 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1 插入排序"></a>1 插入排序</h5><p><strong>思想：</strong></p><p><strong>通过构建有序序列，对于未排列的数据，在已经排好序的数列中从后向前进行扫描，找到相应的位置并插入，插入排序在实现上，在从后向前扫描的过程中，需要反复把已经排序元素逐步向后移动</strong></p><p>•Sorting problem: </p><blockquote><ul><li>–<strong>Input:</strong> A sequence of <em>n</em> numbers <em>a</em>~1~, <em>a</em>~2~, …, a~n~</li><li>–<strong>Output:</strong> A permutation   (reordering) <em>a’</em>~1~, <em>a’</em>~2~, …, <em>a’</em>~n~ of the input sequence such that</li></ul><p>a’~1~&lt;=a’~2~ &lt;= … &lt;=a’~n~</p></blockquote><p>•An instance of the sorting problem</p><blockquote><p>–Input: 8 2 4 9 3 6</p><p>–Output: 2 3 4 6 8 9</p></blockquote><p>•Notation:</p><blockquote><p>–Sorting is a fundamental operation in CS</p><p>–A large number of good sorting algorithms have been D&amp;R</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/27/5ceba10f651f696716.png" alt="算法描述" title>                </div>                <div class="image-caption">算法描述</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/27/5ceba1dd9a94a76116.png" alt="伪代码" title>                </div>                <div class="image-caption">伪代码</div>            </figure><p>具体python代码实现参考<a href="https://albert-5.cn/2019/03/28/sort-algorithm/">博客文章</a></p><p>时间复杂度的问题：</p><p>•<strong>Worst-case:</strong> (usually) </p><blockquote><p>–T(n) = maximum time of algorithm on any input of size n. </p><center>T(n)=maxI {T(n,I)}</center><p>–Time Complexity (Default )</p></blockquote><p>•<strong>Average-case:</strong> (sometimes) </p><blockquote><p>–T(n) = expected time of algorithm over all inputs of size n. </p><p>–Need assumption of statistical distribution of inputs. </p><center>?</center> </blockquote><p>•<strong>Best-case:</strong> (bogus虚假) </p><blockquote><p>–Cheat with a slow algorithm that works fast on <em>some</em> input.</p><center>?</center></blockquote><h5 id="2-时间复杂度描述"><a href="#2-时间复杂度描述" class="headerlink" title="2 时间复杂度描述"></a>2 时间复杂度描述</h5><p>$$<br>\Theta(n) \quad既有上界又有下界<br>$$</p><p>•<strong>Engineering:</strong> </p><blockquote><p>–Drop low-order terms; ignore leading constants.  </p></blockquote><p>example:<br>$$<br>3n^3 + 90n^2 –5n + 6046 = Θ(n3)<br>$$</p><p>$$<br>O(n)\quad 只有上界<br>$$</p><p>$$<br>Ω(n)\quad 只有下界<br>$$</p><hr><h5 id="3-分治思想"><a href="#3-分治思想" class="headerlink" title="3 分治思想"></a>3 分治思想</h5><p>recursively  递归</p><p>subproblems  子问题</p><p><strong>median</strong>  中位数</p><ul><li><p>Merge sort</p><blockquote><p>•Problem:</p><blockquote><p>–Input: A[1,n]</p><p>–Output: A[1,n] in sorted order</p></blockquote><p>•Divide-and-conquer paradigm</p><blockquote><p>–<strong>Divide:</strong> Divide the <em>n</em>-element sequence to be sorted into two subsequences of <em>n</em>/2 elements each.</p><p>–<strong>Conquer:</strong> Sort the two subsequences recursively using merge sort.</p><p>–<strong>Combine:</strong> Merge the two sorted subsequences to produce the sorted answer.</p></blockquote></blockquote></li></ul><p><img src="https://i.loli.net/2019/05/27/5ceba889be77034819.png" alt="1558947965911"></p><p><img src="https://i.loli.net/2019/05/27/5ceba94921f3323702.jpg" alt="1558947965911"></p><ul><li><p>Recursion tree递归树解决递归式问题</p><p><strong>例子</strong>：<br>$$<br>Solve \quad T(n)=2T(n)+cn,\quad where c&gt;0\quad is \quad constant<br>$$</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/27/5cebaa7f899e747908.png" alt="1558947965911" title>                </div>                <div class="image-caption">1558947965911</div>            </figure><h5 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4 快速排序"></a>4 快速排序</h5><p>思想:</p><p>​    通过一趟排序将要排序的数据分割成<strong>独立的两部分</strong>，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>前言介绍</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/27/5cebae4968c7253022.png" alt="1558947965911" title>                </div>                <div class="image-caption">1558947965911</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PARTITION (A,  p,  r)  # A是待排序数组</span><br><span class="line">x ← A[r]</span><br><span class="line">i  ← p-1</span><br><span class="line">FOR j ← p TO r-1</span><br><span class="line">IF A[ j] ≤ x</span><br><span class="line">THEN i ← i + 1</span><br><span class="line">  exchange A[i] ↔ A[ j]</span><br><span class="line">exchange A[i+1] ↔ A[r]</span><br><span class="line">RETURN i+1</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/27/5cebb0702d86d20471.png" alt="1558947965911" title>                </div>                <div class="image-caption">1558947965911</div>            </figure><p>​        <strong>the run time drops from Ω(n log <em>n</em>) to Ω(n^2^)</strong></p><p><strong>提高快速排序的方法</strong></p><p>Median-of-three(三平均分区法)</p><blockquote><p>关于这一改进的最简单的描述大概是这样的：与一般的快速排序方法不同，它并不是选择待排数组的第一个数作为中轴，而是选用待排数组最左边、最右边和最中间的三个元素的中间值作为中轴。这一改进对于原来的快速排序算法来说，主要有两点优势：<br>　　（1） 首先，它使得最坏情况发生的几率减小了。<br>　　（2） 其次，未改进的快速排序算法为了防止比较时数组越界，在最后要设置一个哨点。</p></blockquote><p>提高的方法可以说是这样的：</p><blockquote><p>首先对整个列表的元素进行选取，第一个位置first，中间位置middle，最后一个位置的元素last，然后以这三个数的中位数（以middle）为基准，对列表剩余的元素进行比较采用插入排序进行sort，这样一来，左边的元素都是小于middle的元素，右边的元素都是大于middle的元素；</p><p>然后在对middle左边的元素进行上述操作，对右边进行上述操作，直至待排的元素个数为1。</p><p>至此，整个排序也就完成了；</p></blockquote><h5 id="5-Dynamic-programming-动态规划"><a href="#5-Dynamic-programming-动态规划" class="headerlink" title="5 Dynamic programming 动态规划"></a>5 Dynamic programming 动态规划</h5><p><strong>Rod cutting</strong></p><p>Given a rod of length n inches and a table of prices pi for i = 1,2,3,…,n, determine the maximum revenue(收入) r(n) obtainable by cutting up the rod and<br>selling the pieces.</p><blockquote><p>给定长度为n英寸的杆和i = 1,2,3，…，n的价格表p~i~，确定通过切割杆和杆可获得的最大收入r(n)来销售。</p></blockquote><p><img src="https://i.loli.net/2019/05/31/5cf11c9d992b622317.png" alt="问题描述"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/31/5cf11cd82ac6564716.png" alt="问题描述" title>                </div>                <div class="image-caption">问题描述</div>            </figure><p><img src="https://i.loli.net/2019/05/31/5cf11d99c7bdb91542.png" alt="Nothing" title="哈哈"></p><p><a href="https://blog.csdn.net/qq_27139155/article/details/79725084" target="_blank" rel="noopener">拓展阅读</a></p><h5 id="6-贪心算法"><a href="#6-贪心算法" class="headerlink" title="6 贪心算法"></a>6 贪心算法</h5><p>是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的<strong>算法</strong>；比如在旅行推销员问题中，如果旅行员每次都选择最近的城市，那这就是一种<strong>贪心算法</strong>。 <strong>贪心算法</strong>在有最优子结构的问题中尤为有效；</p><p>通常情况下，贪心算法采用自顶向下的设计，因为不需要作出过多的选择求解所有子问题；</p><p><strong>找零钱问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Change-Making Problem</span><br><span class="line"></span><br><span class="line">Finding the number of ways of making changes</span><br><span class="line">for a particular amount of cents, n, using a given</span><br><span class="line">set of denominations C=&#123;c1…cd&#125; (e.g, the US</span><br><span class="line">coin system: &#123;1, 5, 10, 25, 50, 100&#125;)</span><br><span class="line"></span><br><span class="line">– An example: n = 4,C = &#123;1,2,3&#125;, solutions: &#123;1,1,1,1&#125;,</span><br><span class="line">&#123;1,1,2&#125;,&#123;2,2&#125;,&#123;1,3&#125;.</span><br><span class="line"> Minimizing the number of coins returned for a</span><br><span class="line">particular quantity of change (available coins</span><br><span class="line">&#123;1, 5, 10, 25&#125;)</span><br><span class="line">– 30 Cents (solution: 25 + 5, two coins)</span><br><span class="line">– 67 Cents ?</span><br><span class="line"> 17 cents given denominations = &#123;1, 2, 3, 4&#125;?</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/01/5cf1d0afbb57471277.png" alt="算法" title>                </div>                <div class="image-caption">算法</div>            </figure><p><strong>活动选择</strong></p><p>有一个需要使用每个资源的N个活动组成的集合S ={a1, a2, ···, an},资源每次只能由一个活动使用。每个活动都有一个开始时间和si和结束时间fi，且0=&lt;si&lt;=fi&lt;∞，一旦被选择后，活动ai就只占据时间[si, fi]，如果[si,fi]和[sj,fi]不重叠，则称ai、aj兼容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 活动选取的贪心算法</span><br><span class="line">Greedy-Activity-Selector(s, f)</span><br><span class="line">    n = s.length</span><br><span class="line">    A = &#123;a1&#125;</span><br><span class="line">    k = 1</span><br><span class="line">    for m = 2 to n</span><br><span class="line">        if s[m] &gt;= f[k] # 时间的比较</span><br><span class="line">            A = A U &#123;am&#125;</span><br><span class="line">            k = m</span><br><span class="line">    return A</span><br></pre></td></tr></table></figure><p><strong>最优子结构</strong></p><p><strong>如果一个问题的最优解包含其子问题的最优解，则称此问题具有最优子结构性质。</strong>贪心算法要做的就是逐步求取局部最优解，以致达到全局整体最优。</p><p><strong>赫夫曼编码</strong></p><p>讨论赫夫曼编码问题，<strong>赫夫曼编码的思想就是变长编码；也就是说让字符表中出现概率高的字符的编码长度尽可能的小，而出现概率高的字符的编码相对较长；</strong>然后遵循前缀码的要求，<strong>即是任意一个编码都不是其他编码的前缀</strong>，便于解码。</p><blockquote><p>作者：JeffCoding<br>原文：<a href="https://blog.csdn.net/jeffleo/article/details/53557143" target="_blank" rel="noopener">https://blog.csdn.net/jeffleo/article/details/53557143</a> </p></blockquote><p>赫夫曼编码是一种广泛用于数据压缩的问题，该算法的主要优势在于节约了存储和传输成本。<br>举一个例子：<br>假设要传输的数据为</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210100959132?waterark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 0" title>                </div>                <div class="image-caption">Figure 0</div>            </figure><p>那么传输成本就是：<br>45<em>3 + 30 </em> 3 + 29 <em> 3 + 10 </em> 3 + 8 <em> 3 + 5 </em> 3 = 381个字符</p><p>我们可以使用赫夫曼编码思想来解决<br>先合并最小频率的2个字符对应的子树，计算合并后的子树的频率；<br>重新排序各个子树；<br>重复步骤1<br>重复步骤2<br>对二叉树中的边赋予0、1，得到各字符的变长编码。<br>对于上举的例子而言就是：<br>EF最小，首先构造EF的生成树，重新排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210103651379?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 1" title>                </div>                <div class="image-caption">Figure 1</div>            </figure><p>构造EF 和 D的生成树，重新排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210103733670?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 2" title>                </div>                <div class="image-caption">Figure 2</div>            </figure><p>构造EFD 和 C 的生成树, 重新排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210103803780?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 3" title>                </div>                <div class="image-caption">Figure 3</div>            </figure><p>构造EFDC 和 B 的生成树，重新排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210103828030?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 4" title>                </div>                <div class="image-caption">Figure 4</div>            </figure><p>构造EFDCB 和 A 的生成树，重新排序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210103845536?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 5" title>                </div>                <div class="image-caption">Figure 5</div>            </figure><p>赫夫曼编码后的二进制数据为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161210104103615?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamVmZmxlbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Figure 6" title>                </div>                <div class="image-caption">Figure 6</div>            </figure><p>可以看见，利用赫夫曼思想设计之后，频率高的字符，二进制码短了，频率低的字符，二进制码长了，这样就有效得减少了总得二进制码数。</p><p>那么传输成本就是：<br>45<em>1 + 30 </em> 2 + 29 <em> 3 + 10 </em> 4 + 8 <em> 5 + 5 </em> 5 = 292个字符，节约了23%的成本！</p><center>End</center><hr><h5 id="7-最大流问题"><a href="#7-最大流问题" class="headerlink" title="7 最大流问题"></a>7 最大流问题</h5><p><strong>流网络</strong></p><p>digraph G=(V,E)</p><p>weights, called capacities on edge c(u,v)边缘容量</p><p>two distinct vertices (不同的顶点)</p><p>source, ‘s’; sink ‘t’</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/01/5cf1ea551012294327.png" alt="流网络" title>                </div>                <div class="image-caption">流网络</div>            </figure><p>The value of a flow is the net flow out of the source:<br>$$<br>\sum p(s,v)-\sum p(v,s)<br>$$<br><strong>流网络流出的值是净网络</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/06/01/5cf1ebf9b341b34472.png" alt="网络的值" title>                </div>                <div class="image-caption">网络的值</div>            </figure><center>The value of this flow is 1-0+2=3</center><p><strong>残存网络</strong></p><p>假定有一个流网络G=（V，E），其源点为s，汇点为t，f为G中的一个流。对即诶点对u，v，定义<strong>残存容量（residual capacity）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180612112701509" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure></strong>，有：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180612112750298" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>残存网络可能包含图G中不存在的边，残存网络中的反向边允许算法将已经发送出来的流量发送回去。一个残存网络示例图如下：</p><p>Rabin-KarpRabin-Karp<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180612113041548" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure></p><blockquote><p>图a是一个流网络，b是a对应的残存网络，注意每条边上的值，残存网络中针对<strong>每条正向边计算出该条边在存在流的情况下的剩余容量，并画出一条反向边，反向边的容量即是发出流的大小</strong>，方便将发出的流运输回发送地，并将权重为0的边省略。</p></blockquote><h5 id="8-字符串匹配"><a href="#8-字符串匹配" class="headerlink" title="8 字符串匹配"></a>8 字符串匹配</h5><p><strong>Rabin-Karp算法</strong></p><p>在实际应用中，Rabin-Karp算法的预处理时间为O（m）,并且在最坏的情况下的时间复杂度为O((n-m+1)m),相对于朴素字符串，它的运行时是比较好的。</p><p>整个<strong>算法思想</strong>介绍如下：</p><p>数学中有霍纳法则,我们运用霍纳法则在O(m)内计算p： </p><p>p=P[m]+10(P[m-1]+10(P[m-2]+…+10(P[2]+10P1)…))) </p><p>霍纳法则的解释如下：</p><p> <img src="https://img-blog.csdn.net/20170212231637204?watermar/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ2NzA0NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>运用霍纳法则，类似的我们也可以根据T[s+1…s+m]计算出t. </p><p>但为了节约时间，我们可以利用一下方法在常数时间内根据ts,计算出ts+1.具体过程如下图解: </p><p> 如图所示，ts=31415,ts+1=14152,则 </p><p>ts+1=(ts-(T[s+1]=3)<em>10^(m=4))</em>10+(T[s+m+1]=2) </p><p>注：(ts-(T[s+1]=3)*10^(m=4))=31415-30000=1415 </p><p>即 ts+1=10(ts-10^(m-1)T[s+1])+T[s+m+1] </p><p>在计算过程中，可能会出现p与t的值过大，可以取模运算</p><p><strong>确定优先状态自动机</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20160915154406936" alt="有限自动状态机" title>                </div>                <div class="image-caption">有限自动状态机</div>            </figure><p>上面这个图描述的就叫一个有限状态自动机，图中两个圆圈，也叫节点，用于表示状态，从图中可以看成，它有两个状态，分别叫0和1. 从每个节点出发，都会有若干条边，当处于某个状态时，如果输入的字符跟该节点出发的某条边的内容一样，那么就会引起状态的转换。例如，如果当前状态处于0，输入是字符a,那么状态机就会从状态0进入状态1.如果当前状态是1，输入字符是b或a,那么，状态机就会从状态1进入状态0.如果当前所处的状态，没有出去的边可以应对输入的字符，那么状态机便会进入到错误状态。例如，如果当前处于状态0，输入字符是c,那么状态机就会出错，因为从状态0开始，没有哪条边对应的字符是c。</p><p>状态机会有一个初始节点，和一个接收节点，以上图为例，我们可以设置初始节点为0，接收节点为1，当进行一系列的输入，使得状态机的状态不断变化，只要最后一个输入使得状态机处于接收节点，那么就表明当前输入可以被状态机接收。例如对应字符串”abaaa”, 从初始节点0开始，状态机根据该字符串的输入所形成的状态变化序列为：{0，1，0，1，0，1}。由于最后状态机处于状态1，所以该字符串可以被状态机接收。如果输入的字符串是:abbaa, 那么状态机的变化序列为：{0，1，0，0，1，0}， 由于最后状态机处于非接收状态，因此这个字符串被状态机拒绝。</p><p> 在程序中，使用<strong>二维表</strong>表示一个状态机：</p><table><thead><tr><th><strong>输入</strong></th><th><strong>a</strong></th><th><strong>b</strong></th></tr></thead><tbody><tr><td>状态0</td><td>1</td><td>0</td></tr><tr><td>状态1</td><td>0</td><td>0</td></tr></tbody></table><p>接下来我们看看一个文本的匹配流程，假定要查找的字符串为P=”ababaca”, 被查找的文本为T=”abababacaba”. 一次读入T的一个字符，用S表示当前读入的T的字符，一开始读入一个字符，于是S=a.然后看看，从P开始，连续几个字符所构成的字符串可以成为S的后缀，由于当前S只有一个字符a,于是从P开始，连续1个字符所形成的字符串”a”,可以作为S的后缀。把这个字符串的长度记为k,于是此时k 等于1. 继续从T中读入字符，于是S=”ab”, 此时，从P开始，连续两个字符所构成的字符串”ab”可以作为S的后缀，于是k = 2.反复这么操作，于是便有以下序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S=a, k = <span class="number">1</span>, P[<span class="number">1</span>] 是S的后缀</span><br><span class="line">S=ab, k = <span class="number">2</span>, P[<span class="number">1</span>,<span class="number">2</span>] 是S的后缀</span><br><span class="line">S=aba, k = <span class="number">3</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]是S的后缀</span><br><span class="line">S=abab, k= <span class="number">4</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]是S的后缀</span><br><span class="line">S=ababa, k = <span class="number">5</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]是S的后缀</span><br><span class="line">S=ababab, k = <span class="number">4</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]是S的后缀</span><br><span class="line">S=abababa, k = <span class="number">5</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]是S的后缀</span><br><span class="line">S=abababac, k = <span class="number">6</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]是S的后缀</span><br><span class="line">S=abababaca, k = <span class="number">7</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]是S的后缀</span><br><span class="line">S=abababacab, k =<span class="number">2</span>, P[<span class="number">1</span>,<span class="number">2</span>] 是S的后缀</span><br><span class="line">S=abababacaba, k = <span class="number">3</span>, P[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 是S的后缀。</span><br></pre></td></tr></table></figure><p>从上述过程中，我们可以看到第九步的时候字符串P已经成为了S的后缀，此时的S是文本T的前缀，因此可以说明在字符串T中找到了模式串P。</p><p>如果问题变化，构造一个方法，使得一次运行便能知道从P开始，连续读取几个字符能使得这几个字符构成的字符串是S的后缀。这个方法，就需要上面我们提到的有限状态自动机了</p><p><strong>用于字符串匹配的自动机</strong></p><p>假定字符串P和文本T只由a,b两个字符组成，也就是字符集为∑={a,b,c}, P含有m个字母，于是，我们要构造的自动机就含有m个状态节点。假设我们当前处于状态节点q, 那么当下一个输入字符是a和b时，从当前节点q该跳转到哪一个节点呢？ 如果用$P_q$来表示长度为q的P的前缀，以q=4, p=”ababaca”, $P_q$ =”abab”, 那么当处于状态4, 当输入为a时，我们构造字符串 S = $P_q$ + ‘a’ = “ababa”, 然后看看字符串P从第一个字符开始，连续几个字符所构成的字符串可以成为S的后缀，就当前S为例，从第一个字符开始，连续5个字符，也就是P[1,2,3,4,5]可以作为S的后缀，于是，我们就有，当状态机处于节点4，输入为a时，跳转的下个状态就是5. 同理，当处于状态q=4,输入为字符b时，S = $P_q$ + ‘b’ = “ababb”,此时从P开始，连续读取0个字符才能形成S的后缀，于是当状态机处于状态4，如果读入字符是b, 那么跳转的下一个状态是0，同理，如果输入字符是c, 那么S = $P_q$ + ‘c’ = “ababc”, 此时从P开始，连续读取0个字符所形成的空字符串才能作为S的后缀，于是当状态机处于状态节点4，输入字符为c时，跳转到节点0. 如果q从0开始，一直到m,反复运用刚才提到的步骤，便会产生下面这个跳转表：</p><table><thead><tr><th><strong>输入</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>c</strong></th></tr></thead><tbody><tr><td>状态0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>状态1</td><td>1</td><td>2</td><td>0</td></tr><tr><td>状态2</td><td>3</td><td>0</td><td>0</td></tr><tr><td>状态3</td><td>1</td><td>4</td><td>0</td></tr><tr><td>状态4</td><td>5</td><td>0</td><td>0</td></tr><tr><td>状态5</td><td>1</td><td>4</td><td>0</td></tr><tr><td>状态6</td><td>7</td><td>0</td><td>0</td></tr><tr><td>状态7</td><td>1</td><td>2</td><td>0</td></tr></tbody></table><p>状态I就是上面介绍的K的值，也就是P中形成的字符串可以构成S的后缀的长度；</p><p><strong>KMP算法</strong></p><p>算法流程</p><ul><li><p>假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p><ul><li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li><li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。<ul><li>换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值（next 数组的求解会在下文中详细阐述），即移动的实际位数为：j - next[j]，且此值大于等于1。</li></ul></li></ul><p>next数组的含义：代表当前字符之前的字符串中，有多大长度的相同前缀后缀，例如如果next[j]=k,代表j之前的字符串中有最大长度为k的相同前缀后缀。</p></li></ul><p>此也意味着在某个字符失配时，该字符对应的next 值会告诉你下一步匹配中，模式串应该跳到哪个位置（跳到next [j] 的位置）。如果next [j] 等于0或-1，则跳到模式串的开头字符，若next [j] = k 且 k &gt; 0，代表下次匹配跳到j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符；</p><p><strong>步骤</strong></p><p><strong>①</strong> 寻找前缀后缀的最大公共元素长度</p><ul><li>对于P = p0 p1 …pj-1 pj，寻找模式串P中长度最大且相等的前缀和后缀。如果存在p0 p1 …pk-1 pk = pj- k pj-k+1…pj-1 pj，那么在包含pj的模式串中有最大长度为k+1的相同前缀后缀。举个例子，如果给定的模式串为“abab”，那么它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：</li></ul><p>  <img src="https://img-blog.csdn.net/20140819173639786" alt="img"></p><p>比如对于字符串aba来说，它有长度为1的相同前缀后缀a；而对于字符串abab来说，它有长度为2的相同前缀后缀ab（相同前缀后缀的长度为k + 1，k+1 = 2）。</p><p><strong>②</strong> 求next数组</p><ul><li><p>next 数组考虑的是除当前字符外的最长相同前缀后缀，所以通过第①步骤求得各个前缀后缀的公共元素的最大长度后，只要稍作变形即可：将第①步骤中求得的值整体右移一位，然后初值赋为-1，如下表格所示</p><p><img src="https://img-blog.csdn.net/20140819173649739" alt="img"></p></li></ul><p>比如对于aba来说，第3个字符a之前的字符串ab中有长度为0的相同前缀后缀，所以第3个字符a对应的next值为0；而对于abab来说，第4个字符b之前的字符串aba中有长度为1的相同前缀后缀a，所以第4个字符b对应的next值为1（相同前缀后缀的长度为k，k = 1）</p><p><strong>补充</strong></p><p>寻找最长前缀后缀</p><p>如果给定的模式串是：“ABCDABD”，从左至右遍历整个模式串，其各个子串的前缀后缀分别如下表格所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20140725231726921" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>也就是说，原模式串子串对应的各个前缀后缀的公共元素的最大长度表为（<strong>下简称《最大长度表》</strong>）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20140721222801918" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>而且，根据这个表可以得出下述结论</p><p>失配时，模式串向右移动的位数为：已匹配字符数 - 失配字符的上一位字符所对应的最大长度值<br>    上文利用这个表和结论进行匹配时，我们发现，当匹配到一个字符失配时，其实没必要考虑当前失配的字符，更何况我们每次失配时，都是看的失配字符的上一位字符对应的最大长度值。如此，便引出了next 数组。</p><p>给定字符串“ABCDABD”，可求得它的next 数组如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20140721230250468" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>把next 数组跟之前求得的最大长度表对比后，不难发现，<strong>next 数组相当于“最大长度值” 整体向右移动一位，然后初始值赋为-1</strong>。意识到了这一点，你会惊呼原来next 数组的求解竟然如此简单：就是找最大对称长度的前缀后缀，然后整体右移一位，初值赋为-1（当然，你也可以直接计算某个字符对应的next值，就是看这个字符之前的字符串中有多大长度的相同前缀后缀）。</p>  <center>kmp算法的复杂度是O(n+m)</center><p><strong>参考文章</strong></p><p><a href="https://blog.csdn.net/tyler_download/article/details/52549315" target="_blank" rel="noopener">https://blog.csdn.net/tyler_download/article/details/52549315</a> </p><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827#t5" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/7041827#t5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://albert-5.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="插入排序" scheme="https://albert-5.cn/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法导论" scheme="https://albert-5.cn/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="最大流问题" scheme="https://albert-5.cn/tags/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    
      <category term="KMP算法" scheme="https://albert-5.cn/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>网络流Network_Flow</title>
    <link href="https://albert-5.cn/2019/06/01/%E7%BD%91%E7%BB%9C%E6%B5%81Network-Flow/"/>
    <id>https://albert-5.cn/2019/06/01/网络流Network-Flow/</id>
    <published>2019-06-01T04:44:08.000Z</published>
    <updated>2019-06-01T04:45:35.097Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>内容来源于<a href="https://zhangxiaoyang.me/categories/intro-to-algorithms-tutorial/intro-to-algorithms-tutorial-7.html" target="_blank_">爱美工的程序员</a></p></blockquote><h1 id="网络流（Network-Flow）"><a href="#网络流（Network-Flow）" class="headerlink" title="网络流（Network Flow）"></a>网络流（Network Flow）</h1><p>网络流和线性规划、动态规划是有关系的。它们都属于数学规划，也就是用数学的方法来帮助决策。（详情参考清华大学《数学规划》）这样来看，就没有神秘可言了。小样，换个马甲我还认识你。所以，网络流也是一个解决极值问题的数学方法。</p><p>要解决问题，总得先有个靠谱的模型吧。动态规划和线性规划里边都有公式啥的。总之，要先形式化（建模），再解决。所以，就有了流网络。</p><h2 id="流网络（Flow-Network）"><a href="#流网络（Flow-Network）" class="headerlink" title="流网络（Flow Network）"></a>流网络（Flow Network）</h2><p>顾名思义，流网络是一种用流构成的网络，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E6%B5%81%E7%BD%91%E7%BB%9C%E7%A4%BA%E4%BE%8B.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以把边想象成自来水的管道，把节点想象成管道的连接组件。其中，管道的容量不一定相同，所以就有了不同的边的权重（管道容量是一个大于等于0的常量）。流网络是一个有向图，所以，管道是有方向的（水的流向只能按照管道的方向流）。注意图中两个特殊的连接组件，s代表源，也就是水的入口，t代表汇，也就是水的出口。也就是说，水从s点灌入，从t点流出，具体有多少水流入s，我们不用管，反正是源源不断；从t流出的水去哪，我们也不用操心。</p><p>这样，我们就得到了一个流网络，s是流的入口，t是流的出口，s和t之间有若干个管道连接。要谨记这个流网络中管道的容量限制和方向限制，若是没有它，又何必来学网络流。</p><h2 id="流（Flow）"><a href="#流（Flow）" class="headerlink" title="流（Flow）"></a>流（Flow）</h2><p>流网络可以看成是一张线路图，这里是自来水管道的线路图，相当于硬件基础设施。</p><p>我们现在要做的是使用这个基础设施，也就是往管道里灌水，确保每个管道里的流量不超过容量限制。比如，我们可以这样灌，如下图。边的权重增加了流量参数，使用斜线与容量进行分隔。</p><p><strong>注意：这里的所有图中，如果有斜线标识，则左侧表示流，右侧表示容量。如果没有斜线，则只是表示容量。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E6%B5%81%E7%A4%BA%E4%BE%8B.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>对流网络灌水得到的就是“流”。当然，这只是其中一种满足流量不超过容量限制的灌水方法。还可以有很多种灌水的方法。但是都要遵循以下两个原则：</p><ul><li>容量限制：管道的流量不能超过容量。</li><li>流量守恒：流入管道连接组件的流量等于流出的流量。</li></ul><p>至此，我们成功的得到了“流”。</p><h2 id="s-t流（s-t-Flow）"><a href="#s-t流（s-t-Flow）" class="headerlink" title="s-t流（s-t Flow）"></a>s-t流（s-t Flow）</h2><p>现实往往是不按套路出牌的。比如，连接的地方（节点）可能有权重，能够蓄水。比如，有多个源多个汇。比如，有多个管道连接两个节点。</p><p>总之，现实的种种迹象表明，我们需要设计一个兼容并包的模型，考虑种种情况。</p><p>但是，我们不想考虑那么多情况。</p><p>于是，就有了一个小伙想了个点子，定义一种标准模型，我们只研究这个标准的模型。其它的情况通过一些方法转化成这个标准模型。</p><p>是的，这个标准模型就是s-t流。一些转化方法如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E8%BD%AC%E5%8C%96%E4%B8%BAs-t%E6%B5%81.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h1 id="最大流（Maximum-Flow）"><a href="#最大流（Maximum-Flow）" class="headerlink" title="最大流（Maximum Flow）"></a>最大流（Maximum Flow）</h1><p>费尽心思，从初步的流网络，到我们比较喜欢的标准形式s-t流，是时候考虑正事儿了。</p><p>流网络是固定的，但是流是不确定的。所以，我们想在多种灌水的方法中寻找最佳。</p><p>何为最佳？</p><p>在源灌入大量的水，通过选择最好的管道流量和流向，使得汇流出的流量最大。但是，最大流不是想找就能找到的，所以这是个问题，即最大流问题。</p><h2 id="Trial-1-Dynamic-programming"><a href="#Trial-1-Dynamic-programming" class="headerlink" title="Trial 1: Dynamic programming"></a>Trial 1: Dynamic programming</h2><p>既然是数学规划，首先想到的是能不能使用动态规划。</p><p>现实情况是，目前还没有解决最大流问题的动态规划算法。</p><h2 id="Trial-2-Iteration"><a href="#Trial-2-Iteration" class="headerlink" title="Trial 2: Iteration"></a>Trial 2: Iteration</h2><p>想到的另外一种方法是迭代法，伪代码表示如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = x0;</span><br><span class="line">while true do</span><br><span class="line">    x = improve(x);</span><br><span class="line">    if stopping(x) then</span><br><span class="line">        break</span><br><span class="line">    end if</span><br><span class="line">end while</span><br><span class="line">return x</span><br></pre></td></tr></table></figure><p>主要是思想是从某个流开始，不断的改进这个流，直到到达我们想要的最大流。</p><p>不得不说，这想法太粗略了。一些问题没有解决，比如，如何选择开始的流，如何改进，何时停止算法。</p><p>为了解决这些问题，我们需要继续补充一些基础知识。这样才能干掉这个问题。</p><p>（为什么不试试线性规划？线性规划是可以解决的，但是对于这种网络的结构，并不能很高效。）</p><h2 id="割（Cut）"><a href="#割（Cut）" class="headerlink" title="割（Cut）"></a>割（Cut）</h2><p>对于一个流网络，在若干个管道上切一刀，使这个网络分成两部分，这两部分将无法连通。所以，我们有很多种切割的方法，把这个网络分成两部分。每一种切割的方法对应于一个“割”。</p><h2 id="s-t割（s-t-Cut）"><a href="#s-t割（s-t-Cut）" class="headerlink" title="s-t割（s-t Cut）"></a>s-t割（s-t Cut）</h2><p>s-t割是一种特殊的“割”，这种切割的方式需要保证在切割之后s和t不再连通，即s和t不属于同一部分了。</p><p>对于一个s-t割，必然会把s和t分到两个小网络中，并且切坏了若干个管道。这两个小网络之间的管道容量之和就是割的值，只计算从包含s的小网络流向包含t的小网络的管道容量之和，反方向不考虑。一个s-t割如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/s-t%E5%89%B2.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以计算出，割的值为12+14=26。可以看到，割的值只与流网络有关，和流无关。对于一个确定的流网络，一刀切下去，割的值就确定了。</p><h2 id="最小割（Minimum-Cut）"><a href="#最小割（Minimum-Cut）" class="headerlink" title="最小割（Minimum Cut）"></a>最小割（Minimum Cut）</h2><p>对于一个流网络，我们可以得到多个割的值，因为切的方法有很多种，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E5%90%84%E7%A7%8D%E5%89%B2%E5%80%BC.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>在这里，我们更关心割值最小的情况，即最小割。为什么更关心最小割？下面会说~</p><h2 id="净流量（Net-Flow）"><a href="#净流量（Net-Flow）" class="headerlink" title="净流量（Net Flow）"></a>净流量（Net Flow）</h2><p>注意到，割的值是和流无关的，只与流网络有关。也就是说，割的值只是取决于管道的容量和方向，以及切的方法。</p><p>如果我们观察一下流，发现了一个规律，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E5%87%80%E6%B5%81%E9%87%8F.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>真的是固定值有木有！这个固定值就是净流量。之所以有这个规律，是因为流量守恒。</p><p>需要注意，在计算净流量时，需要考虑两个方向的值，并求代数和。从s流向t记为正，从t流向s记为负。对于割值的计算，则无需考虑从t流向s的。因为割值实际计算的是管道容量，净流量考虑的是真实的流量。</p><h2 id="残留网络（Residual-Network）"><a href="#残留网络（Residual-Network）" class="headerlink" title="残留网络（Residual Network）"></a>残留网络（Residual Network）</h2><p>残留网络，顾名思义，就是流网络中去掉流剩下的网络。对于某条管道，其容量减去流以后剩下的流构成的网络，就形成了残留网络。每一个流会对应一个残留网络，残留网络 = 流网络 - 流，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E6%AE%8B%E7%95%99%E7%BD%91%E7%BB%9C.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>需要说明的是，蓝色的边称作反向边，方向与原来的方向相反，数值为原来流量的值。</p><p>为什么要加上这个看似多余的反向边？</p><blockquote><p>反向边的作用就是给程序一个可以后悔的机会。（来自<a href="http://blog.csdn.net/leolin_/article/details/7202691" target="_blank" rel="noopener">这里</a>)）</p></blockquote><p>也就是说，加这个边是为了寻找最大流的程序的执行。</p><h2 id="增广路径（Augmenting-Path）"><a href="#增广路径（Augmenting-Path）" class="headerlink" title="增广路径（Augmenting Path）"></a>增广路径（Augmenting Path）</h2><p>扯这么多，主要是为了引出这个增广路径。因为增广路径能帮我们找到最大流。</p><p>增广路径就是残余网络中的一条s到t方向的路径，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E5%A2%9E%E5%B9%BF%E8%B7%AF%E5%BE%84.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果我们找到了这样一条路径，说明原来的流不够大，还可以在这条路径上压入一些流量，在这里是3，取11、12、3中最小值。</p><p>这样，我们就可以得到更大的流。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>从流（我们更关心最大流），到割（我们更关心最小割），到残留网络，再到增广路径，我们在做啥子吗？</p><p>我的理解是，这些流呀割呀都是理论储备，最终是想证明一句话：残留网络$G_f$中不包含增广路径时，f就是G的最大流。</p><p>而残留网络、增广路径是解决这个最大流问题的手段，通过寻找增广路径的方法来改进当前的流，朝最大流逼近。但是，问题是何时停止算法呢？这就是理论储备部分告诉我们的，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E7%BD%91%E7%BB%9C%E6%B5%81%E6%80%9D%E8%80%83.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h2 id="最大流最小割定理（Max-Flow-Min-Cut-Theorem）"><a href="#最大流最小割定理（Max-Flow-Min-Cut-Theorem）" class="headerlink" title="最大流最小割定理（Max-Flow Min-Cut Theorem）"></a>最大流最小割定理（Max-Flow Min-Cut Theorem）</h2><p><strong>重述一遍，残留网络$G_f$中不包含增广路径时，f就是G的最大流（或者说，最大流的流量等于最小割的容量）。</strong></p><p><strong>这就是传说中的最大流最小割定理。</strong></p><p>这个可以用反证法证明，假设当不包含增广路径时没有达到最大流，那么就会找到一条路径来增大流，也就找到了增广路径，所以矛盾。大致是这样证明。</p><h1 id="Ford-Fulkerson方法"><a href="#Ford-Fulkerson方法" class="headerlink" title="Ford-Fulkerson方法"></a>Ford-Fulkerson方法</h1><p>Ford-Fulkerson是一种求解最大流的方法，依赖于上面积淀的基础知识（主要是残留网络、增广路径、割的功劳），也称作“扩充路径方法”。之所以称之为方法而不是算法，是因为这个只是一种指导思想，在此指导之下，有很多种实现方式。</p><p>Ford-Fulkerson是一种迭代法，过程如下：</p><ol><li>流网络中所有顶点对的流大小清零（此时，网络流为零）</li><li>每次迭代，通过寻找一条增广路径来增加流的值</li><li>无法找到增广路径时，迭代结束</li></ol><p>可以看到，最关键问题是如何寻找增广路径，而Ford-Fulkerson方法的效率正取决于此。如果选择方法不好，就有可能每次增加的流非常少，而算法运行时间非常长，甚至无法终止。</p><p>但是，Ford-Fulkerson并没有告诉我们如何寻找增广路径。所以，它是个方法，而不是算法，伪代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> initialize f(e) = 0 for all e</span><br><span class="line">while there is a s-t path in residual graph Gf do</span><br><span class="line">    arbitrarily choose an s-t path P in Gf</span><br><span class="line">    f = augment(P, f)</span><br><span class="line">end while</span><br><span class="line">augment(P, f)</span><br><span class="line">    let b = bottleneck(P)</span><br><span class="line">    for each edge e = (u, v) ∈ P do</span><br><span class="line">        if (u, v) is a forward edge then</span><br><span class="line">            increase f(u, v) by b</span><br><span class="line">        else</span><br><span class="line">            decrease f(u, v) by b</span><br><span class="line">        end if</span><br><span class="line">    end for</span><br></pre></td></tr></table></figure><p>其中，<code>augment</code>是一个改变当前流的函数，即使用找到的增广路径P来压入流，增大当前的流f。而<code>bottleneck</code>从当前的增广路径P中找到瓶颈边（残留网络中，路径上流量最小的边），把这个流量压入。</p><p>正是因为在选择增广路径时是<code>arbitrarily</code>，所以Ford-Fulkerson方法有多种实现。</p><h2 id="Scaling-technique"><a href="#Scaling-technique" class="headerlink" title="Scaling technique"></a>Scaling technique</h2><p>第一种是scaling的方法，通过伪代码更好解释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">initialize f(e) = 0 for all e</span><br><span class="line">let △ = C</span><br><span class="line">while △ ≥ 1 do</span><br><span class="line">    while there is a s-t path in Gf(△) do</span><br><span class="line">        choose a s-t path</span><br><span class="line">        f&apos; = augment(P, f)</span><br><span class="line">        f = f&apos;</span><br><span class="line">   end while</span><br><span class="line">   △ = △ / 2</span><br></pre></td></tr></table></figure><p>可以看到，通过定义一个△来调节增广路径的选择顺序。C是一个定义的常熟。如果残留网络中的边（流量值）小于C，则“删除”该边，在新的网络中选择增广路径。如果这样的网络中找不到增广路径（也就是说，所有的边都不符合△的限制），则把△缩放为原来的一半，继续寻找增广路径。直到△不满足大于等于1时，算法结束。</p><p>例子来自卜老师的课件，△初始化为96。第一次的时候，残留网络的所有边被“删除”（标记为蓝色），因为都小于96。然后△调整为96/2=48，这样就获得了一条增广路径，并压入流。直到找不到增广路径，算法结束，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到，scaling方法是通过加一个△（阈值）来选择增广路径的。通过这个阈值，可以尽可能的一次压入多一些的流。我们的目标是迭代的次数少且每次压入的流要多。</p><h2 id="Edmonds-Karp"><a href="#Edmonds-Karp" class="headerlink" title="Edmonds-Karp"></a>Edmonds-Karp</h2><p>Edmonds-Karp算法是使用BFS（广度优先搜索）的方式，选择最近的路径作为增广路径，伪代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">initialize f(e) = 0 for all e</span><br><span class="line">while there is a s-t path in Gf do</span><br><span class="line">    choose a shortest s-t path in Gf using BFS</span><br><span class="line">    f&apos; = augment(P, f)</span><br><span class="line">    f = f&apos;</span><br><span class="line">end while</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>走了好久终于等到现在…</p><p>总结来说，前面一直在铺垫，积累些基础知识，为了得到最大流最小割定理，然后证明Ford-Fulkerson方法能够获得最大流。</p><p>但是，这终归是个方法。方法没有告诉我们哪一种寻找增广路径的算法是最好的。于是就有人搞了各种算法，进行了各种测试，性能也就各不相同了，如下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://zhangxiaoyang.me/drafts/categories/intro-to-algorithms-tutorial/images/%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>总之，是为了算法实现的更好，终极目标是高效的找到最大流，也就是解决最大流问题咯。</p><p>一些参考：</p><ol><li><a href="http://www.csie.ntnu.edu.tw/~u91029/Cut.html#2" target="_blank" rel="noopener">http://www.csie.ntnu.edu.tw/~u91029/Cut.html#2</a></li><li><a href="http://blog.csdn.net/leolin_/article/details/7202691" target="_blank" rel="noopener">http://blog.csdn.net/leolin_/article/details/7202691</a></li><li><a href="http://blog.csdn.net/smartxxyx/article/details/9293665" target="_blank" rel="noopener">http://blog.csdn.net/smartxxyx/article/details/9293665</a></li><li><a href="http://blog.csdn.net/kk303/article/details/6728400" target="_blank" rel="noopener">http://blog.csdn.net/kk303/article/details/6728400</a></li><li><a href="http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html" target="_blank" rel="noopener">http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html</a></li><li><a href="http://chhaj5236.blog.163.com/blog/static/112881081200982835124243/" target="_blank" rel="noopener">http://chhaj5236.blog.163.com/blog/static/112881081200982835124243/</a></li><li><a href="http://xpgc.vicp.net/course/ada4ia/TechDoc/ch09/ia-09-maxflow.pdf" target="_blank" rel="noopener">http://xpgc.vicp.net/course/ada4ia/TechDoc/ch09/ia-09-maxflow.pdf</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- EOF --</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://albert-5.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法导论" scheme="https://albert-5.cn/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://albert-5.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流问题" scheme="https://albert-5.cn/tags/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Typora语法</title>
    <link href="https://albert-5.cn/2019/05/31/Typora%E8%AF%AD%E6%B3%95/"/>
    <id>https://albert-5.cn/2019/05/31/Typora语法/</id>
    <published>2019-05-31T08:35:16.000Z</published>
    <updated>2019-05-31T08:47:44.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora-语法"><a href="#Typora-语法" class="headerlink" title="Typora 语法"></a>Typora 语法</h1><h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹Tex命令，例如：<code>$lim_{x \to \infty} \ exp(-x)=0$</code>将产生如下的数学表达式：</p><p>$\lim_{x \to \infty} \exp(-x)=0$</p><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生H~2~O, 即水的分子式。</p><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式y^2^ = 4</p><h3 id="插入表情-happy"><a href="#插入表情-happy" class="headerlink" title="插入表情:happy:"></a>插入表情:happy:</h3><p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用HTML的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>使用`包裹的内容将会以代码样式显示，例如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用`printf()`</span><br></pre></td></tr></table></figure><p>则会产生<code>printf()</code>样式。</p><ul><li><p>输入<code>~~~</code>或者<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure></p><p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class HelloWorld&#123;</span><br><span class="line">  System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将会产生</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public Class HelloWorld&#123;</span><br><span class="line">  System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__</span><br></pre></td></tr></table></figure><p>将会输出</p><p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*</span><br></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p><p><img src="http://typora.io/img/drag-img.gif" alt="drag and drop image"></p></li></ul><h3 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h3><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a>.</p><p>如果是标准的url，则会自动产生连接，例如:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p><p>也可以借用HTML中的语法结构，使用<strong><a></a></strong>标签</p><h3 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p><hr><h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></table></figure><p>将产生：</p><p>某些人用过了才知道[^注释]</p><p>[^注释]: Somebody that I used to know.</p><p>把鼠标放在<code>注释</code>上，将会有提示内容。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|毕业学校|</span><br><span class="line">|:---|:---:|:---:|</span><br><span class="line">|1|男|1|</span><br><span class="line">|2|男|1|</span><br><span class="line">|3|女|1|</span><br></pre></td></tr></table></figure><p>将产生:</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">毕业学校</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:center">男</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">2</td><td style="text-align:center">男</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">3</td><td style="text-align:center">女</td><td style="text-align:center">1</td></tr></tbody></table><p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个是居中，最后一个是右对齐。</p><h3 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$</span><br></pre></td></tr></table></figure><p>将会产生:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/31/5cf0e9f57e0df95282.png" alt="123.png" title>                </div>                <div class="image-caption">123.png</div>            </figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [ ] 逛街</span><br><span class="line">- [ ] 看电影</span><br><span class="line">- [ ] 约泡</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox" checked> 吃饭</li><li style="list-style: none"><input type="checkbox" checked> 逛街</li><li style="list-style: none"><input type="checkbox" checked> 看电影</li><li style="list-style: none"><input type="checkbox" checked> 约泡</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**无序的列表**</span><br><span class="line">* tfboys</span><br><span class="line">* 杨洋</span><br><span class="line">* 我爱你</span><br></pre></td></tr></table></figure><p><strong>无序的列表</strong></p><ul><li>tfboys</li><li>杨洋</li><li>我爱你</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**有序的列表**</span><br><span class="line">1. 苹果</span><br><span class="line">6. 香蕉</span><br><span class="line">10. 我都不喜欢</span><br></pre></td></tr></table></figure><p><strong>有序的列表</strong></p><ol><li>苹果</li><li>香蕉</li><li>我都不喜欢</li></ol><h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个块引用！</span><br></pre></td></tr></table></figure><p>将产生：</p><blockquote><p>这是一个块引用！</p></blockquote><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="学习" scheme="https://albert-5.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="typora" scheme="https://albert-5.cn/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火算法</title>
    <link href="https://albert-5.cn/2019/05/23/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    <id>https://albert-5.cn/2019/05/23/模拟退火算法/</id>
    <published>2019-05-23T15:51:26.000Z</published>
    <updated>2019-05-24T11:56:46.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> <strong>模拟退火算法</strong></p><p>模拟退火算法(SimulatedAnnealing)是基于Monte-Carlo迭代求解策略的一种随机寻优算法,主要用于组合优化问题的求解。</p><p>假设现在有这么一个函数：<br>$$<br>f(x) = x^3-72x^2+4x+5<br>$$<br>现要求其在[0,100]范围内的最小值，如果不求导计算，可能第一反应都是穷举法，把范围内每个值都算一遍再比较大小。如果求的是整数范围，那么要算100遍，但是如果要精确到小数后8位，则要算10000000000次，即便使用计算机依然是一个庞大的运算过程。而优化问题中很多都类似于问题，无法用穷举法解出答案，我们叫这类问题为NP难问题（可查看维基百科：<a href="https://en.wikipedia.org/wiki/NP-hardness" target="_blank" rel="noopener">NP-hard</a>），于是，有人提出了<a href="https://zh.wikipedia.org/wiki/%E7%88%AC%E5%B1%B1%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">爬山法</a></p><p>也可以参考下<a href="https://blog.csdn.net/lvhao92/article/details/50826709" target="_blank" rel="noopener">争取几句话描述一下爬山法，模拟退火，遗传算法</a>他的博客文章博客文章</p><blockquote><p>但是这个方法的缺点在于最优解的产生依赖于最初值的选取，无法解决非凸函数，即容易收敛于局部最优解；同时，也无法解决有平台的函数的问题</p></blockquote><p>于是，Kirkpatrick等提出了模拟退火算法，它是一种<strong>启发式搜索算法，即按照预定的控制策略进行搜索，在搜索过程中获取的中间信息将用来改进控制策略</strong></p><p><strong>1. 模拟退火算法的原理</strong></p><p><strong>1.1 概念</strong></p><p>模拟退火算法的思想借鉴于固体的退火原理，当固体的温度很高的时候，内能比较大，固体的内部粒子处于快速无序运动，当温度慢慢降低的过程中，固体的内能减小，粒子的慢慢趋于有序，最终，当固体处于常温时，内能达到最小，此时，粒子最为稳定。模拟退火算法便是基于这样的原理设计而成。</p><p>模拟退火算法从某一高温出发，在高温状态下计算初始解，然后以预设的邻域函数产生一个扰动量，从而得到新的状态，即模拟粒子的无序运动，比较新旧状态下的能量，即目标函数的解。如果新状态的能量小于旧状态，则状态发生转化；如果新状态的能量大于旧状态，则以一定的概率准则发生转化。当状态稳定后，便可以看作达到了当前状态的最优解，便可以开始降温，在下一个温度继续迭代，最终达到低温的稳定状态，便得到了模拟退火算法产生的结果。</p><p><strong>1.2 状态空间与邻域函数</strong></p><p>状态空间也称为搜索空间，它由经过编码的可行解的集合所组成。而邻域函数应尽可能满足产生的候选解遍布全部状态空间。其通常由产生候选解的方式和候选解产生的概率分布组成。候选解一般按照某一概率密度函数对解空间进行随机采样获得，而概率分布可以为均匀分布、正态分布、指数分布等。</p><p><strong>1.3 状态转移概率（Metropolis准则）</strong></p><p>状态转移概率是指从一个状态转换成另一个状态的概率，模拟退火算法中一般采用Metropolis准则，具体如下：<br>$$<br>P = \begin{cases}<br>1 &amp; E(x_{new})&lt;E(x_{old}) \<br>exp(-E(x_{new})&lt;E(x_{old})\over{T} &amp; E(x_{new})\geq E(x_{old})<br>\end{cases}<br>$$<br>其与当前温度参数T有关，随温度的下降而减小。 </p><p><strong>1.4 冷却进度表</strong></p><p>冷却进度表是指从某一高温状态T向低温状态冷却时的降温函数,设时刻的温度为T(t)，则经典模拟退火算法的降温方式为：<br>$$<br>T(t)={T_0\over{lg(t+1)}}<br>$$<br>快速模拟退火算法的降温方式为：<br>$$<br>T(t) = {T_0\over{t+1}}<br>$$<br>另外还有其他的降温函数，其实只是收敛的速度不同罢了。</p><p><strong>1.5 初始温度</strong></p><p>一般来说，初始温度越大，获得高质量解的几率越大，但是花费的时间也会随之增加，因此，初温的确定应该同时考虑计算效率与优化质量，常用的方法包括：</p><p>(1)均匀抽样一组状态，以各状态目标值的方差为初温。</p><p>(2)随机产生一组状态，确定亮亮状态间的最大目标值差，然后根据差值，利用一定的函数确定初温，如：<br>$$<br>T_0 = -{\Delta_{max}\over P_r}<br>$$<br>其中Pr为初始接受概率。</p><p>(3)根据经验公式给出</p><p><strong>1.6 循环终止准则</strong></p><p>内循环终止准则：</p><p>（1）检验目标函数的均值是否稳定</p><p>（2）连续若干步的目标值变化较小</p><p>（3）按一定的步数进行抽样</p><p>外循环终止准则</p><p>（1）设置终止温度</p><p>（2）设置外循环迭代次数</p><p>（3）算法搜索到的最优值连续若干步保持不变</p><p>（4）检验系统熵是否稳定</p><p><strong>Python实现过程：</strong></p><p>下面便通过python求解开头提到的问题，首先定义函数，然后通过pyplot看看函数在[0,100]上的大致图像：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment">#define aim function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aimFunction</span><span class="params">(x)</span>:</span></span><br><span class="line">    y=x**<span class="number">3</span><span class="number">-60</span>*x**<span class="number">2</span><span class="number">-4</span>*x+<span class="number">6</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">x=[i/<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line">y=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    y[i]=aimFunction(x[i])</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/05/23/5ce6be9b1a85441627.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到最小值大概在48左右，通过求导计算得到最小值为48.45。</p><p>接下来便构造SA模型：</p><p>定义初温、低温阈值并通过随机得到初始x，同时定义时刻t。通过均匀分布构造邻域函数，同时设定内循环次数为50次，降温函数使用<br>$$<br>T(t) = {T_0\over{t+1}}<br>$$<br>代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">T=<span class="number">1000</span> <span class="comment">#initiate temperature</span></span><br><span class="line">Tmin=<span class="number">10</span> <span class="comment">#minimum value of terperature</span></span><br><span class="line">x=np.random.uniform(low=<span class="number">0</span>,high=<span class="number">100</span>)<span class="comment">#initiate x</span></span><br><span class="line">k=<span class="number">50</span> <span class="comment">#times of internal circulation </span></span><br><span class="line">y=<span class="number">0</span> <span class="comment">#initiate result</span></span><br><span class="line">t=<span class="number">0</span> <span class="comment">#time</span></span><br><span class="line"><span class="keyword">while</span> T&gt;=Tmin:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment">#calculate y</span></span><br><span class="line">        y=aimFunction(x)</span><br><span class="line">        <span class="comment">#generate a new x in the neighboorhood of x by transform function</span></span><br><span class="line">        xNew=x+np.random.uniform(low=<span class="number">-0.055</span>,high=<span class="number">0.055</span>)*T</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>&lt;=xNew <span class="keyword">and</span> xNew&lt;=<span class="number">100</span>):</span><br><span class="line">            yNew=aimFunction(xNew)</span><br><span class="line">            <span class="keyword">if</span> yNew-y&lt;<span class="number">0</span>:</span><br><span class="line">                x=xNew</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#metropolis principle</span></span><br><span class="line">                p=math.exp(-(yNew-y)/T)</span><br><span class="line">                r=np.random.uniform(low=<span class="number">0</span>,high=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> r&lt;p:</span><br><span class="line">                    x=xNew</span><br><span class="line">    t+=<span class="number">1</span></span><br><span class="line">    print(t)</span><br><span class="line">    T=<span class="number">1000</span>/(<span class="number">1</span>+t)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> (x)</span><br><span class="line">print(aimFunction(x))</span><br></pre></td></tr></table></figure><p>经过循环输出x与y，结果如下：</p><p>​            48.45411386249023    -55082.24210065413</p><p>可以看到SA算法很好的逼近了最优解。</p><p><strong>参考文章</strong></p><p><a href="https://www.imooc.com/article/30160" target="_blank" rel="noopener">模拟退火算法与python实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="智能算法" scheme="https://albert-5.cn/categories/%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://albert-5.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="https://albert-5.cn/tags/python/"/>
    
      <category term="模拟退火" scheme="https://albert-5.cn/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode</title>
    <link href="https://albert-5.cn/2019/05/16/Leetcode/"/>
    <id>https://albert-5.cn/2019/05/16/Leetcode/</id>
    <published>2019-05-16T08:29:30.000Z</published>
    <updated>2019-10-20T12:11:40.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><font color="indigo" font-size="5">领扣–引领新时尚</font></strong></p><h4 id="1-两数之和问题"><a href="#1-两数之和问题" class="headerlink" title="1. 两数之和问题"></a>1. 两数之和问题</h4><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>解法1–暴力解法</p><p>思路：</p><blockquote><p>给定一个数组和一个特定的目标值，对每一个数进行遍历，然后利用两层循环遍历的值进行if条件判断，如果相等，则返回下标；否则返回None.</p></blockquote><p>具体实现：</p><blockquote><p>class Solution:<br>def twoSum(self, nums,target):<br>       for i in range(len(nums)):<br>           for j in range(i+1, len(nums)):<br>               if nums[i]+nums[j] == target:<br>                   return [i, j]<br>               else:<br>                   continue</p><p>nums = [2,7,11,15]<br>target = 9<br>solution = Solution()<br>print(solution.twoSum(nums,target))</p></blockquote><p>缺点：过于暴力，两层循环使得时间代价过高。</p><p>时间复杂度：O(n^2^)</p><p>解法2–较优化算法</p><p>思路：</p><blockquote><p>相比于暴力解法，此法优化了双层循环</p><p>一次循环遍历，然后用目标值减去数组中的每一个值，然后判断减去得到的值是否在数组中，进而再判断小标问题；</p></blockquote><p>具体实现：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">&gt;        a = target - nums[i]</span><br><span class="line">&gt;        <span class="keyword">if</span> a <span class="keyword">in</span> nums:</span><br><span class="line">&gt;            b = nums.index(a)</span><br><span class="line">&gt;            <span class="keyword">if</span> b != i:</span><br><span class="line">&gt;                <span class="keyword">return</span> [i, b]</span><br><span class="line">&gt; </span><br><span class="line">&gt; nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">&gt; target = <span class="number">9</span></span><br><span class="line">&gt; solution = Solution()</span><br><span class="line">&gt; print(solution.twoSum(nums, target))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>解法3–优化算法 &lt;来源于网络，怪自己 :sweat:···&gt;</p><p>思路：</p><blockquote><p>优解:创建一个字典，通过循环把 target - nums[x]作为键，x作为值存入字典，边存边检查当前正在处理的nums[x]是否存在于字典中，存在：返回字典中nums[x]的值，和当前正在使用的x的值。</p></blockquote><p>具体实现：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">&gt;    dic = &#123;&#125;</span><br><span class="line">&gt;    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">&gt;         <span class="keyword">if</span> target - nums[x] <span class="keyword">in</span> dic:</span><br><span class="line">&gt;            result = [dic[target - nums[x]], x]</span><br><span class="line">&gt;            <span class="keyword">return</span> result</span><br><span class="line">&gt;         dic[nums[x]] = x</span><br><span class="line">&gt;        </span><br><span class="line">&gt; nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">&gt; target = <span class="number">9</span></span><br><span class="line">&gt; solution = Solution()</span><br><span class="line">&gt; print(solution.twoSum(nums, target))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="2-回文数问题"><a href="#2-回文数问题" class="headerlink" title="2. 回文数问题"></a>2. 回文数问题</h4><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>解法1–较优化解法</p><p>思路：</p><blockquote><p>将所给数字转化为<strong>字符串</strong>，因为回文数是具有对称性的，所以比较字符串的第一位和最后一位、第一次位和末尾次位 ······<font color="indigo">但是由于一位数以及负数和末尾为0的数的特殊性，应该加以判断。</font></p><p>由于对称性，所以考虑字符长度，奇偶数：通过模2判断只需要判断一般就可以了。</p></blockquote><p>实现：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">&gt;         n = str(x)</span><br><span class="line">&gt;         print(n)</span><br><span class="line">&gt;         m = len(n)</span><br><span class="line">&gt;         count = <span class="number">0</span></span><br><span class="line">&gt;         <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">&gt;         <span class="keyword">elif</span> n[<span class="number">0</span>] == <span class="string">"-"</span> <span class="keyword">or</span> n[m<span class="number">-1</span>] == <span class="string">'0'</span>:</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">&gt;         <span class="keyword">elif</span> m % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">&gt;             <span class="keyword">for</span> i <span class="keyword">in</span> range(int(m/<span class="number">2</span>)):</span><br><span class="line">&gt;                 <span class="keyword">if</span> n[i] == n[m<span class="number">-1</span>-i]:</span><br><span class="line">&gt;                     count += <span class="number">1</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">&gt;         <span class="keyword">else</span>:</span><br><span class="line">&gt;             <span class="keyword">for</span> i <span class="keyword">in</span> range(int((m+<span class="number">1</span>)/<span class="number">2</span>)):</span><br><span class="line">&gt;                 <span class="keyword">if</span> n[i] == n[m<span class="number">-1</span>-i]:</span><br><span class="line">&gt;                     count += <span class="number">1</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">&gt;         <span class="keyword">if</span> count == int(m/<span class="number">2</span>) <span class="keyword">or</span> count == int((m+<span class="number">1</span>)/<span class="number">2</span>):</span><br><span class="line">&gt;             <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; X = <span class="number">0</span></span><br><span class="line">&gt; solution = Solution()</span><br><span class="line">&gt; print(solution.isPalindrome(X))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>时间复杂度为 O(n)</p><p>执行代码，运行时间108 ms</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="https://albert-5.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="https://albert-5.cn/tags/LeetCode/"/>
    
      <category term="算法" scheme="https://albert-5.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="两数之和" scheme="https://albert-5.cn/tags/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    
      <category term="回文数" scheme="https://albert-5.cn/tags/%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>sublime配置有关问题</title>
    <link href="https://albert-5.cn/2019/05/06/sublime%E9%85%8D%E7%BD%AE%E6%9C%89%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://albert-5.cn/2019/05/06/sublime配置有关问题/</id>
    <published>2019-05-06T07:42:54.000Z</published>
    <updated>2019-05-06T07:46:34.288Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Answer-amp-amp-Question"><a href="#Answer-amp-amp-Question" class="headerlink" title="Answer &amp;&amp; Question"></a>Answer &amp;&amp; Question</h2><h3 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h3><p><strong>安装Package Control有两种方式，第一种方式为：在控制台中输入安装命令。调出控制的方式为：Ctrl+`。Sublime Text2和Sublime Text 3的命令如下：</strong></p><p><strong>sublime text 2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="literal">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by) <span class="keyword">if</span> dh == h <span class="keyword">else</span> <span class="literal">None</span>; print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure><p><strong>sublime text 3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure><p><strong>这一种方法我试了，好像没有卵用，打开console时会出现错误—由于连接方在一段时间后没有正确答复或者连接的主机没有反应，连接尝试失败</strong></p><p>So, 失败告终，唯能另寻别发</p><hr><hr><p><strong>后来在网上找了大量文章，看了好多解决方法，但大多无用，因为那个官网是无法访问的，好像是因为ip6什么的问题，但是除了······*<a href="需要的可以联系我981287080@qq.com">^注释1</a>这样可以下载得到package control压缩包</strong></p><p><strong>万事大吉？？？想的可真多啊 ^-^</strong></p><hr><hr><p>下载之后在指定的preferences/browser packages进行拖放下载好且解压好的文件，之后看是否出现<strong>package setting</strong>，如果出现，<strong>Ctrl+shift+P</strong>，输入<strong>install package</strong>，你就会看到这个包</p><p><strong>也就说明 You are ok</strong></p><p>但是<strong>不可避免出现 there are no packagesa avaliable for installation</strong>的错误。</p><p>怎么办？？？？</p><p>可愁死我了·······</p><p>找了资料发现是这个原因 <strong>在利用sublime进行插件下载时，sublime会调用channel_v3.json文件，点击Preferences-&gt;Package Setting-&gt;Package Control -&gt;Setting Default，可以看到该文件是放置在网络中进行读取的，而由于GFW的原因，导致无法读取该文件（但是竟然可以直接访问？？），这也就是导致插件无法下载的原因</strong></p><p>所以只需要修改这个<strong>json</strong>文件即可</p><p>方法也有很多，这是我在<a href="https://www.zhihu.com" target="_blank" rel="noopener">知乎</a>上看到的<a href="https://www.zhihu.com/question/26373122/answer/156739767" target="_blank" rel="noopener">https://www.zhihu.com/question/26373122/answer/156739767</a></p><p><strong>但是我没有成功，嘤嘤嘤</strong>，主要是因为json文件没法下载</p><p>后来找到了,<a href="https://raw.githubusercontent.com/Albert-5/Stark-Lab/master/channel_v3.json" target="_blank" rel="noopener">给你</a></p><p>添加到本地文件夹，然后在<strong>点击Preferences-&gt;Package Setting-&gt;Package Control -&gt;Setting Default</strong>看到一个<strong>channels</strong>，后面的路径修改下就可以了</p><p>别慌！！</p><p>记得试一下哦，老方法，</p><p><strong>Ctrl+shift+P</strong>，输入<strong>install package</strong>，你就可以开始玩耍啦~~</p><p>学习之中遇到的问题就记录下来了，小白上路，若有问题可联系me<a href="Email:981287080@qq.com" target="_blank" rel="noopener">^contact me</a>,欢迎指正。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="sublime" scheme="https://albert-5.cn/categories/sublime/"/>
    
    
      <category term="sublime" scheme="https://albert-5.cn/tags/sublime/"/>
    
      <category term="python" scheme="https://albert-5.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>摄影理论篇</title>
    <link href="https://albert-5.cn/2019/05/03/%E6%91%84%E5%BD%B1/"/>
    <id>https://albert-5.cn/2019/05/03/摄影/</id>
    <published>2019-05-03T03:00:03.000Z</published>
    <updated>2019-10-20T12:01:10.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h4 id="一-人像摄影"><a href="#一-人像摄影" class="headerlink" title="一. 人像摄影"></a>一. 人像摄影</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h5><p>所谓人像摄影，是指通过摄影的形式，在照 片上用鲜明突出的形象描绘和表现被摄者相 貌和神态的作品，它是被摄者的影像写真。</p><p>• 一幅优秀的人像摄影作品，是许多成功因 素的总和：神情、姿态、构图、照明、曝 光、制作均要达到较高的境界，它们是一 个总体的各组成部分。 </p><p>• 不管是在现场中抓拍的还是在照相室里摆 拍的，不管是否带有情节，只要是以表现 被摄者具体的外貌和精神状态为主的照片， 都属于人像摄影的范畴。</p><p>• 人像摄影的景别，主要有以下几种： </p><blockquote><p>（1）特写 以表现被摄者的面部特征为 主要目的 </p><p>（2）近景 它以表现人物的面部相貌为主 背景环境在画面中只占极少部分 </p><p>（3）半身 以脸部面貌为主要表现对象以外 还常常包括手的动作。 </p><p>（4）全身 使人物的形象与背景环境的特点 互相结合，都能得到适当的表现</p></blockquote><p>• 拍摄方向大体上分作: </p><blockquote><p>• 正面人像 </p><p>• 七分面人像 </p><p>• 三分面人像 </p><p>• 侧面人像</p></blockquote><p>• 调子影响视觉和情感。人像摄影可以分作高调、低调、一股影调、软调、硬调五种 影调。</p><blockquote><p>高调：画面的影调构成以亮调子为主，尽量避免或者少用暗调子。</p><p>人像照片的背景要明亮、干净、均匀，但最好又保留一点淡淡的层次，以便衬托出被摄者更亮的部位。</p></blockquote><p>• 夜景人像</p><p>1）直接使用相机的夜景人像模式<br>2）使用AV档，曝光组合主要以夜景的背景 为参考，第二张开启闪光灯，照亮人像， 难点在于前后用光均衡。</p><h5 id="2-技巧"><a href="#2-技巧" class="headerlink" title="2. 技巧"></a>2. 技巧</h5><p>人像焦段的选择</p><p>• 1)镜头焦段选择：28-180 毫米皆可以，但是 50-135毫米最常用。尤其推荐85mm定焦镜 头。<br>• 2）光圈控制，适度虚化背景，突出人物主 体。F2.0-F5.6常用</p><blockquote><p>拍摄人像小诀窍 </p><p>• 1）相机的测光模式为点测，点测人像的脸 部，曝光增加0.5-1档，使得皮肤美白； </p><p>• 2）相机有人像和美肌美肤模式请设置 </p><p>• 3）化妆，服装，饰物非常重要； </p><p>• 4）反光板或者外置闪光灯补光要常用，减 弱脸部阴暗，另外使得眼睛有眼神光；</p><p>• 5）多和模特交流，减少她的紧张； </p><p>• 6）尝试多种拍摄视角和运光方式，身体可 以尝试多种POSE；</p><p>• 7）事先应该确定风格。</p></blockquote><h4 id="二-新闻摄影"><a href="#二-新闻摄影" class="headerlink" title="二. 新闻摄影"></a>二. 新闻摄影</h4><h5 id="1-要求"><a href="#1-要求" class="headerlink" title="1. 要求"></a>1. 要求</h5><p> 1新闻摄影 : “新” :首先是个新字。应该是 新鲜事、新闻，别人不知道的、没见过的。<br> 2纪实:反映真实的现场，让未能身临其境者 如同亲历。<br> 3具备这两点后，新闻还要有社会价值。</p><h5 id="2-新闻摄影5W"><a href="#2-新闻摄影5W" class="headerlink" title="2. 新闻摄影5W"></a>2. 新闻摄影5W</h5><blockquote><p> 何时（when）； </p><p> 何地(where)；</p><p> 何人(who)； </p><p> 何事(what)； </p><p> 为何(why)。</p></blockquote><p><strong>瞬间成为永恒，成为历史的见证</strong></p><p><strong>不要细细追求技术完美，抓住瞬间才是关键</strong></p><h5 id="3-会场类相片"><a href="#3-会场类相片" class="headerlink" title="3. 会场类相片"></a>3. 会场类相片</h5><blockquote><p>相机参数： 1.档位选择：首先考虑使用A档 若光线较差，使用A档则会出现曝光时间过长，照片模 糊，此时考虑换成M档，将快门速度设置在1/15至1/60 之间</p><p>2.光圈：合理，F2.8-F5.6拍摄人物，F8拍摄全</p><p>3.ISO感光度：灯光较亮—100-800 灯光一般—800-1600 灯光较暗—1600以上 </p><p>4.白平衡：自动白平衡 日光灯 荧光灯</p><p><strong>拍摄曝光和器材要求</strong></p><p>会议拍摄曝光和器材要点：<br>1）大功率外置闪光灯必备，最 好套好小型柔光罩；<br>2）镜头折合后焦距24-105mm；<br>3）充分利用会场内的现场光；<br>4）ISO设置到 800-1600；<br>5）控制光圈，使得闪光灯和现 场光平衡。</p><p>1.正面全景 </p><p>2.近景特写 </p><p>3.角落全景</p><p>4.台上全景 </p><p>5.颁奖合</p></blockquote><h4 id="三-建筑、红外、LOMO、针孔摄影、延时摄影、超现实摄影"><a href="#三-建筑、红外、LOMO、针孔摄影、延时摄影、超现实摄影" class="headerlink" title="三. 建筑、红外、LOMO、针孔摄影、延时摄影、超现实摄影"></a>三. 建筑、红外、LOMO、针孔摄影、延时摄影、超现实摄影</h4><h5 id="1-建筑摄影"><a href="#1-建筑摄影" class="headerlink" title="1. 建筑摄影"></a>1. 建筑摄影</h5><h6 id="1-要点"><a href="#1-要点" class="headerlink" title="1. 要点"></a>1. 要点</h6><p>• 建筑的形体（体现建筑空间的深度，感受到三维空间的真实世界，其表现在<strong>运用视觉透视和利用阴影来提高建筑的空间感</strong>）、轮廓（<strong>当建筑处在背光面时，光线从建筑的背面射来，在强光的烘托下，轮廓剪影成了建筑的主要视觉要素，而空间、质感、色彩等等其它要素统统都被隐没在阴影之中。</strong>）、线条、尺度比例、质感和色 彩是建筑摄影中视觉要素的主要成分。<br>• 在大多数情况下，上述要素并不是以相同 的地位在画面上同时出现，特别是当摄影 师需要突出表现建筑的某一特征时更是如 此。在画面中需要重点突出那些视觉要素 取决于照片的用途，也取决于摄影师的创 作意图和创作风格。</p><p>• 点 线 面 立体空间是建筑摄影最主要观察的</p><h6 id="2-失真方法"><a href="#2-失真方法" class="headerlink" title="2. 失真方法"></a>2. 失真方法</h6><p>普通135相机和镜头，站在地面拍摄，产生透视失真，图像有 汇聚效应，头小脚大。<strong>但是</strong>，大画幅或者技术相机通过，前镜头板的上升，完美解决该问题。</p><h6 id="3-控制建筑透视失真方法"><a href="#3-控制建筑透视失真方法" class="headerlink" title="3. 控制建筑透视失真方法"></a>3. 控制建筑透视失真方法</h6><blockquote><p>• 35mm相机及其透视调整镜头 </p><p>• 目前尼康、佳能、徕卡、美能达等相机厂 均生产透视调整镜头，如佳能相机的TS-E 24mm、45mm和90mm透视调整镜头，徕卡 R系列相机的28mm透视调整镜头，美能达 相机的35mm透视调整镜头，尼康相机的 28mm、35mm 和 85mm透视调整镜头。</p></blockquote><p><strong>建筑摄影顾名思 义，其主要记录 和表现对象为各 种建筑以及由于 建筑物的存在而 产生的空间关系 和状态。</strong></p><h6 id="4-透视"><a href="#4-透视" class="headerlink" title="4. 透视"></a>4. 透视</h6><p>最初研究透视是 采取通过一块透明的平面去看景物的方法 ，将所见景物准确描画在这块平面上，即 成该景物的透视图。后遂将在平面画幅上 根据一定原理，用线条来显示物体的空间 位置、轮廓和投影的科学称为透视学</p><p>使用<strong>中等焦距镜头</strong>在一定距离上拍摄建筑标志性雕塑可以避免近距离拍摄是因透视加剧而 产生的比例失真，这时建筑、雕塑、人的比例关系更为客观</p><h6 id="5-建筑摄影的6个使用拍摄建议"><a href="#5-建筑摄影的6个使用拍摄建议" class="headerlink" title="5. 建筑摄影的6个使用拍摄建议"></a>5. 建筑摄影的6个使用拍摄建议</h6><blockquote><p>1、利用反射或倒影增加美</p><p>2、利用好几何线条</p><p>3、利用人工光源衬托</p><p>4、寻找兴趣点</p><p>5、俯视营造纵深感</p><p>6、HDR、移轴效果、全景拼接、鱼眼扭曲…… </p></blockquote><p><strong>• 建筑摄影八要素：角度、光线、线条、云 彩、框架的运用、影子、景观、人物； • 视觉要素：形体、轮廓、线条、尺度比例 、质感、色彩……</strong> </p><h5 id="2-LOMO摄影"><a href="#2-LOMO摄影" class="headerlink" title="2. LOMO摄影"></a>2. LOMO摄影</h5><blockquote><p>Lomo有了新含义，Lomo是Let Our lives be Magic and Open</p></blockquote><blockquote><p>lomo是缩写形式，原英文是Let our life be magic and open（意即让我们的生活开放、 有魔力）。在相机里指简单、随意的风格</p></blockquote><blockquote><p>关于<strong>LOMO的十大原则</strong></p><ul><li>1.Take your Lomo every-where you go .走到哪儿,就把Lomo带到哪儿。</li><li>2.Use it anytime-day and night .Lomo不分昼夜。</li><li>3.Lomography is not an interference in your life, but a part of it.不用担心Lomo打扰 你的生活,它就是生活的一部分。</li><li>4.Shoot from the hip. 想拍哪儿就拍哪儿。</li><li>5.Approach the objects of your lomographic desireas close as possible.近点儿,再近 点儿。</li><li>6.Don’t think.什么都不用想。</li><li>7.Be fast.还要快。</li><li>8.You don’t have to know beforehand what you’ve captured on film. 不必了解你要拍 什么。</li><li>9.You don’t have to know beforehand what you’ve cap-tured on film…and afterward seither.更不必了解你拍到了什么。</li><li>10.Don’t worry about the rules.把以上的9条都忘掉。</li></ul></blockquote><h5 id="3-红外摄影"><a href="#3-红外摄影" class="headerlink" title="3. 红外摄影"></a>3. 红外摄影</h5><p>红外摄影是一种较为另类的拍摄方式，利 用红外感光设备与红外滤镜配合，有别于 传统的黑白彩色照片，拍出的画面给人以 强烈的震撼让人爱不释手；同时红外线相 对可见光对一些材料及衣料具有穿透能力 （薄化纤、烟雾、水气…），能拍出神奇的 透视效果</p><p><strong>红外摄影技术的获得</strong></p><blockquote><p>• 1）将价格很低的数码相机CMOS或者CCD传 感器前的低通滤镜拆除，镜头前加红外滤 镜。改造后只能用于红外摄影。</p><blockquote><p>1.改装F828作为红外相机是极为正确 1.28-200mm简直是红外版的一镜走天下，何况还有2.0-2.8的大光圈！ </p><p>2.EVF让你时刻都能观察不一样的红外世界（单反相机怎么改也不行，光学取 景器就是光学取景器），而且F828除了EVF外还有个液晶屏也能取景（废话）， EVF和液晶屏能随机背一起进行上下旋转，极大扩展了构图的可能性！ </p><p>3.不像单反相机是对焦和感光元件相互分离的设计，F828的感光元件即对焦 元件，因此改成红外机后没有跑焦问题！<br>4.镜头前是58mm螺纹，不需拆机即可随意更换各种波段的红外滤镜！（改红 外的单反这条最悲剧）<br>5.在液晶屏中实时电子测光，红外线下曝光准确，所拍即所见！</p></blockquote><p>• 2）不破坏现有相机的功能，镜头前直接加 红外滤镜。</p><blockquote><p>• 1.    喜欢浓烈色彩的, 可以选择630nm 或者更低波长的590滤镜, 自定义 白平衡后, 原片一般天空呈亮红偏棕色,或者说是琥珀色, 植物树叶呈蓝 色. 红蓝通道调换后(后文有说明)天空蓝色饱和度高, 树叶黄色或者金 黄色.<br>• 2.    喜欢适中的, 可以选择680, 原片天空呈棕红色, 树叶浅蓝, 通道调换 后天空比较接近正常天空的蓝色, 树叶呈浅黄色.<br>• 3.    喜欢较为纯正红外但又希望带有色彩的, 可以选择720滤镜, 原片天 空呈暗棕红色, 饱和度较低, 树叶白, 通道调换后天空暗浅蓝色, 树叶白.  760滤镜理论上来说有是有颜色的,实际颜色很浅, 几乎是黑白的.<br>• 4.    喜欢纯红外的可以选择850nm滤镜, 无色彩, 天气好时, 天空深暗, 可以得到反差较高的图片, 对于雾霾有更好的穿透力.</p></blockquote></blockquote><h5 id="4-针孔摄影"><a href="#4-针孔摄影" class="headerlink" title="4. 针孔摄影"></a>4. 针孔摄影</h5><p>• 1）利用小孔成像的原理，抛弃我们已经使 用习惯的光学镜头；<br>• 2）可以得到四周有暗角的、中心稍微清晰 的图像；<br>• 3）一般来说，针孔的透视关系和广角镜头 接近；</p><p><strong>特点</strong></p><blockquote><p>• 模糊、变形、色彩诡异的影像<br>• 拍摄风景也有朦胧美感<br>• 具有超现实主义的图像风格</p><p>针孔摄影实现的方法<br>• 1）购买专门的针孔相机，一般使用胶卷<br>• 2）利用数码单反改造</p></blockquote><h5 id="5-延时摄影"><a href="#5-延时摄影" class="headerlink" title="5. 延时摄影"></a>5. 延时摄影</h5><p>延时摄影是以一种较低的帧率拍下图像或者视频，然后用正常或者较快的速率播放画面的摄影技术</p><blockquote><p>方法<br>• 1）相机没有内置延时摄影的，按照间隔时 间逐张拍摄，可用电子定时快门自动触发 ，后期软件合成；<br>• 2）直接使用相机内置延时摄影APP，例如 sony相机，设置好参数，主要是间隔时间和 总时长。</p><p>拍摄时间间隔参考<br>• 1)在拍摄城市白天的车流和行人时，间隔时 间设置为 1秒，拍摄间隔小于1秒</p><p>• 2)在拍摄城市夜晚的车流时，间隔时间设置 为2秒到5秒之间，机身设置快门速度为间 隔时间减1秒。</p><p>• 3)在拍摄天空云层运动时，依云层运动速度 ，设置间隔时间为3秒到10秒不等，云层运 动速度越慢，间隔时间最越长。</p></blockquote><p>延时摄影的分类<br>• 1）固定场景延时摄影，相机固定不动，拍 摄内容部分移动；<br>• 2）移轴延时摄影，相机适当缓慢匀速移动 ，同时拍摄内容部分运动，比1显得丰富有 趣。</p><h4 id="四-纪实摄影"><a href="#四-纪实摄影" class="headerlink" title="四. 纪实摄影"></a>四. 纪实摄影</h4><p>摄影从诞生之日开始就赋予了“真实记录” 的使命</p><p>现代公认的摄影术的诞生是1893年，法国人画家 达盖尔银版摄影技术正式问世</p><p><strong>把真实的瞬间保留下来，是摄影对历史记录的伟大贡献</strong></p><p><strong>摄影的最主要的美学特征也 是他的纪实性。</strong></p><blockquote><p>艺术摄影：所谓艺术摄影就是最大限度的 使用视觉形式和各种摄影手段，表达摄影 师的艺术思想和哲学理念。他不受真实性 的影响，不受摄影手段的限制，也不受时 间和空间的制约。</p><ul><li>艺术摄影和纪实摄影是否真实这点上区别 很大</li></ul><p>纪实性摄影：所谓纪实性摄影就是对任何真实事件、场景、物体的现实现<br>场的记录。</p><p><strong>纪实摄影归类为两个方面:<br>1）关于自然和物;<br>2）关于社会与人。</strong></p><p><strong>决定性瞬间是纪实摄影的根本</strong></p><p>环境的决定性瞬间<br> 前景的决定性瞬间，<br> 背景的决定性瞬间，<br> 光影的决定性瞬间所组成。</p><p>人物的决定性瞬间<br> 神态的决定性瞬间，<br> 交流决定性瞬间，<br> 运动决定性瞬间所组成。</p></blockquote><p>纪实摄影的拍摄方法<br>纪实摄影不是艺术，画面的美和光影 的斑斓不是他的追求目标。 他的意义在于 是否真实的记录了历史，纪实摄影作品的好坏有 它自己的标准</p><p>  照片所承载的信息要准确。就是使读者一看就明 白，照片说的是什么意思。表达的是什么观点和 立场。</p><p> <strong>纪实摄影的拍摄原则就是；真实的记录，不对正在发生的</strong><br><strong>事件做任何干涉和影响。使事件按照自己的发展规律发展，</strong><br><strong>不论事件是好是坏。</strong></p><p><strong>构图原则</strong></p><blockquote><p>1）照片所表现的事件真实而有现场感</p><p>短焦距镜头的使用，使得能较好的 保证现场感的体现</p><p>利用标准镜头的透视关系和视角最接近 人类的眼睛，所拍摄的作品符合人们的习 惯</p><p><strong>28-50mm</strong>之间的焦距，比较符合纪实 摄影的要求</p><p>2）构图的形式要适合视觉的习惯</p><p>3）视觉中心构图，就是把主体安放在视觉中 心的位置上，利于读者注意画面主体，明确主 体，清楚事件的主体是在什么环境下运作的。</p></blockquote><p><strong>纪实摄影的拍摄方法</strong></p><p>1）守株待兔法：</p><p> 2）声东击西法</p><p> 3）掩护法：</p><p>4）突然袭击法</p><p> 5）逼迫法：</p><p>6）盲拍法</p><p>7）最合理的做法是，和被拍摄对 象沟通聊天，乃至和他一起生活 很长时间，深入了解他并记录他</p><p><strong>适当 提高ISO，ISO400-1600，ISO自动最 合理了。光圈适当缩小，F2.8、 F4  快门 保持高速。</strong></p><p><strong>拍摄经验</strong><br> 1）置于AV光圈优先档； </p><p> 2）光圈 F2.0-F4.0（35mm-50mm镜头）； </p><p> 3）矩阵测光，80%的照片能够合适曝光。只要 不过曝光，后期可以处理； </p><p> 4）ISO随时设置，注意快门是否低于安全快门 速度（镜头焦距的倒数），尽量不低于1/125S. 如果图简单，ISO设置成AUTO </p><p> 5）触摸屏相机极大的优势，对焦点所摸所得。 </p><p> 6）看准时机，连拍多张。</p><blockquote><p>纪实摄影三个关键点<br> 1）寻求题材：关注普通人的生活，但是关 注的题材带有社会的共性。对社会现象记 录和深度发掘；<br> 2）观察：带着探究本质的精神去观察现象<br> 3）思考：深入题材，独特的现象记录，思 考所记录的表现和题材背后的内在本质联 系·。</p><p>纪实摄影前期选题思考 </p><p> 1）人文纪实的最大的难题不是如何拍，而是拍什 么？</p><p> 2）宏观观察社会，微观记录。从社会具体现象来 表达社会特征； </p><p> 3)走出猎奇误区，不要觉得拍摄一些旅游中不常见 的少数民族生活就肯定是好作品，拍摄你最熟悉的 生活； </p><p> 4）唯美误区，形式至上的误区； </p><p> 5）影赛的误区，那是极大的误导； </p><p> 6）突出时代，远离抽象，眼下习以为常的现象十 年后说不定觉得好有趣味好有意义；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="摄影" scheme="https://albert-5.cn/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="人像摄影" scheme="https://albert-5.cn/tags/%E4%BA%BA%E5%83%8F%E6%91%84%E5%BD%B1/"/>
    
      <category term="LOMO摄影" scheme="https://albert-5.cn/tags/LOMO%E6%91%84%E5%BD%B1/"/>
    
      <category term="红外摄影" scheme="https://albert-5.cn/tags/%E7%BA%A2%E5%A4%96%E6%91%84%E5%BD%B1/"/>
    
      <category term="延时摄影" scheme="https://albert-5.cn/tags/%E5%BB%B6%E6%97%B6%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>toefl &amp; ielts</title>
    <link href="https://albert-5.cn/2019/04/28/toefl-ielts/"/>
    <id>https://albert-5.cn/2019/04/28/toefl-ielts/</id>
    <published>2019-04-28T03:50:51.000Z</published>
    <updated>2019-08-04T09:02:41.097Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="TOEFL"><a href="#TOEFL" class="headerlink" title="TOEFL"></a>TOEFL</h2><p><strong>托福是美国教育考试中心开发出来的给非英语国家学生的英语水平测试</strong></p><h3 id="1、认可国"><a href="#1、认可国" class="headerlink" title="1、认可国"></a>1、认可国</h3><blockquote><p><strong>北美国家（特别是美国）包括日本对托福成绩的接受度较高；</strong></p><p><strong>英联邦国家（英国、荷兰、加拿大、澳大利亚、新西兰、瑞士等）更接受甚至只接受托福成绩；</strong></p></blockquote><h3 id="2、考试形式"><a href="#2、考试形式" class="headerlink" title="2、考试形式"></a>2、考试形式</h3><p><strong>雅思和托福的考试内容也不相同，虽然都是对“听说读写”四种英语能力的测试，但是雅思更加注重生活应用，词汇量没有托福要求的那么多；而托福更加注重学术方面，对专业性的要求更高一点</strong></p><blockquote><p><strong>托福是纯机考，也就是说不管是听力、阅读还是写作，甚至口语都是对着一台电脑，以“人机”的方式进行考核的</strong>。</p></blockquote><h3 id="3、分数分配"><a href="#3、分数分配" class="headerlink" title="3、分数分配"></a>3、分数分配</h3><p><strong>托福是四项单项各30分，总计120分，最后几项分数加起来为总成绩；考试时间大概在4个小时左右，可能会有加试的情况；</strong></p><p><strong>其中，托福成绩在100分以上是不错的分数</strong></p><blockquote><p><strong>有限期为两年</strong></p></blockquote><h3 id="4、考试费用"><a href="#4、考试费用" class="headerlink" title="4、考试费用"></a>4、考试费用</h3><table><thead><tr><th>项目</th><th>金额</th></tr></thead><tbody><tr><td><strong>托福网考考试费</strong></td><td><strong>1985</strong></td></tr><tr><td><strong>逾期报名附加费</strong></td><td><strong>310</strong></td></tr><tr><td><strong>转考费</strong></td><td><strong>620</strong></td></tr><tr><td><strong>恢复已取消的成绩</strong></td><td><strong>154</strong></td></tr><tr><td><strong>成绩赠送费（每份）</strong></td><td><strong>146</strong></td></tr><tr><td><strong>口语或写作单项复议</strong></td><td><strong>615</strong></td></tr><tr><td><strong>口语和写作双项复议</strong></td><td><strong>1229</strong></td></tr><tr><td><strong>托福复习套餐Prem(不包含考试费)</strong></td><td><strong>1086</strong></td></tr><tr><td><strong>托福复习套餐prep</strong></td><td><strong>395</strong></td></tr><tr><td><strong>折扣报名费</strong></td><td><strong>1716</strong></td></tr><tr><td><strong>考费差额 1</strong></td><td><strong>44</strong></td></tr><tr><td><strong>考费差额 2</strong></td><td><strong>224</strong></td></tr><tr><td><strong>考费差额 3</strong></td><td><strong>1104.5</strong></td></tr><tr><td></td></tr></tbody></table><h2 id="IELTS"><a href="#IELTS" class="headerlink" title="IELTS"></a>IELTS</h2><h3 id="1、认可国-1"><a href="#1、认可国-1" class="headerlink" title="1、认可国"></a>1、认可国</h3><p><strong>雅思是英国大使馆文化教育处来出题的</strong></p><blockquote><p><strong>相对的英国目前大部分高校只认可雅思成绩</strong></p></blockquote><h3 id="2、考试形式-1"><a href="#2、考试形式-1" class="headerlink" title="2、考试形式"></a>2、考试形式</h3><blockquote><p><strong>雅思</strong>则是笔试 +面试的形式，口语环节是面对面直接和考官交流的，分数的弹性相对更大一点。对于喜欢交流的人而言考雅思更能会更加有利。</p></blockquote><h3 id="3、分数分配-1"><a href="#3、分数分配-1" class="headerlink" title="3、分数分配"></a>3、分数分配</h3><p><strong>雅思的四项单项都是九分满分制，最后以四项平均分定为最终分数，一般情况下，雅思在7分以上是不错的成绩</strong></p><blockquote><p>有效期为<strong>两年</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="English" scheme="https://albert-5.cn/categories/English/"/>
    
    
      <category term="toefl" scheme="https://albert-5.cn/tags/toefl/"/>
    
      <category term="ielts" scheme="https://albert-5.cn/tags/ielts/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://albert-5.cn/2019/04/22/hello-world/"/>
    <id>https://albert-5.cn/2019/04/22/hello-world/</id>
    <published>2019-04-22T15:42:22.451Z</published>
    <updated>2019-08-04T09:02:02.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="https://albert-5.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://albert-5.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
